<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随想录</title>
  
  
  <link href="https://concaxu.github.io/atom.xml" rel="self"/>
  
  <link href="https://concaxu.github.io/"/>
  <updated>2024-08-19T12:14:14.363Z</updated>
  <id>https://concaxu.github.io/</id>
  
  <author>
    <name>Conca Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>8月份打工日记</title>
    <link href="https://concaxu.github.io/2024/08/19/8%E6%9C%88%E4%BB%BD%E6%89%93%E5%B7%A5%E6%97%A5%E8%AE%B0/"/>
    <id>https://concaxu.github.io/2024/08/19/8%E6%9C%88%E4%BB%BD%E6%89%93%E5%B7%A5%E6%97%A5%E8%AE%B0/</id>
    <published>2024-08-19T11:54:54.000Z</published>
    <updated>2024-08-19T12:14:14.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="康熙字典API接口"><a href="#康熙字典API接口" class="headerlink" title="康熙字典API接口"></a><code>康熙字典API接口</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先把康熙字典 api 接入系统，或者是源码接入系统。作为 p0，这样就可以自己查询五行。增加康熙笔画的框选</span><br><span class="line">任务量：API的寻找（尝试使用开源 但是满足不了需求），于是自己写脚本借鉴抓取了康熙大帝的数据库</span><br><span class="line">接入后目前使用在字库中，可以看到康熙字画、简笔画、五行等</span><br></pre></td></tr></table></figure><h2 id="写字机二代"><a href="#写字机二代" class="headerlink" title="写字机二代"></a><code>写字机二代</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一代采用的是websocket通信,python端采用队列进行存储任务。由于写字机不给力经常挂掉，导致第一代软件需要重启导致队列订单丢失。</span><br><span class="line">新需求：想要加急订单、想在web看到写字机的任务列表</span><br><span class="line">由于队列的形式无法满足现在的要求所以有了写字机第二代。</span><br><span class="line">新型版本：</span><br><span class="line">    采用数据库存储订单防止订单丢失，下多少都可以 反正不会丢。</span><br><span class="line">    支持编辑订单加急、切换写字机（为后续多台写字机做铺垫）</span><br><span class="line">    可以看到订单的实时状态：写字中、卡纸异常、排队中</span><br><span class="line">    之前的订单如果写完但是机器异常了没拍照上传需要重新写，现在支持手动拍照上传，节约成本</span><br></pre></td></tr></table></figure><h2 id="字库生成名固定字无五行"><a href="#字库生成名固定字无五行" class="headerlink" title="字库生成名固定字无五行"></a><code>字库生成名固定字无五行</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">之前的字库生成名客户指定固定字是没有这个字的五行的策划不知道五行</span><br><span class="line">所有增加了这么一个功能，指定字也去查询这个字的五行插入拼接在字的五行里</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;康熙字典API接口&quot;&gt;&lt;a href=&quot;#康熙字典API接口&quot; class=&quot;headerlink&quot; title=&quot;康熙字典API接口&quot;&gt;&lt;/a&gt;&lt;code&gt;康熙字典API接口&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="打工日记" scheme="https://concaxu.github.io/categories/%E6%89%93%E5%B7%A5%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="打工日记" scheme="https://concaxu.github.io/tags/%E6%89%93%E5%B7%A5%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之代理模式</title>
    <link href="https://concaxu.github.io/2024/08/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://concaxu.github.io/2024/08/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-08-13T14:28:58.000Z</published>
    <updated>2024-08-13T15:04:04.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之代理模式"><a href="#设计模式之代理模式" class="headerlink" title="设计模式之代理模式"></a><code>设计模式之代理模式</code></h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><code>定义</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代理模式（Proxy）：为其他对象提供一种代理以控制对这个对象的访问</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><code>应用场景</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:远程代理：为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实</span><br><span class="line"><span class="number">2</span>:虚拟代理:根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象</span><br><span class="line"><span class="number">3</span>:安全代理:用来控制真是对象访问时的权限</span><br><span class="line"><span class="number">4</span>:智能指引:当调用真实的对象时，代理处理另外一些事</span><br></pre></td></tr></table></figure><h3 id="代码解释-代理表白为别人做嫁衣"><a href="#代码解释-代理表白为别人做嫁衣" class="headerlink" title="代码解释 代理表白为别人做嫁衣"></a><code>代码解释 代理表白为别人做嫁衣</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Confession 接口: 定义了 confess() 方法,这是表白的抽象行为。</span><br><span class="line">RealConfessor 类: 实际表白者,实现了直接表白的行为。</span><br><span class="line">ProxyConfessor 类: 代理表白者(朋友),它持有一个 RealConfessor 的引用。</span><br><span class="line">    在 confess() 方法中,它首先介绍自己的角色。然后调用实际表白者的 confess() 方法。最后,还会添加一些额外的信息来支持表白。</span><br><span class="line">ProxyConfessionDemo 类:客户端代码,展示了如何使用代理表白。</span><br><span class="line"></span><br><span class="line">使用特点：</span><br><span class="line">    控制访问:代理在实际表白前后添加了额外的行为。</span><br><span class="line">    增强功能:代理不仅传达了表白信息,还增加了额外的支持性言论。</span><br><span class="line">    隐藏实现细节:客户端不需要直接与实际表白者交互。</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><code>代码</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表白接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Confession</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">confess</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际表白者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealConfessor</span> <span class="keyword">implements</span> <span class="title class_">Confession</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String crushName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RealConfessor</span><span class="params">(String name, String crushName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.crushName = crushName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confess</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 鼓起勇气对 &quot;</span> + crushName + <span class="string">&quot; 说: &#x27;我喜欢你!&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理表白者（朋友）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyConfessor</span> <span class="keyword">implements</span> <span class="title class_">Confession</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RealConfessor realConfessor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String proxyName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyConfessor</span><span class="params">(String confessorName, String crushName, String proxyName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.realConfessor = <span class="keyword">new</span> <span class="title class_">RealConfessor</span>(confessorName, crushName);</span><br><span class="line">        <span class="built_in">this</span>.proxyName = proxyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confess</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(proxyName + <span class="string">&quot; 作为 &quot;</span> + realConfessor.getName() + <span class="string">&quot; 的朋友,帮忙传达消息...&quot;</span>);</span><br><span class="line">        realConfessor.confess();</span><br><span class="line">        System.out.println(proxyName + <span class="string">&quot; 补充道: &#x27;我可以证明,他/她是一个很好的人!&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyConfessionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Confession</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyConfessor</span>(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;小红&quot;</span>, <span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        proxy.confess();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式之代理模式&quot;&gt;&lt;a href=&quot;#设计模式之代理模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之代理模式&quot;&gt;&lt;/a&gt;&lt;code&gt;设计模式之代理模式&lt;/code&gt;&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=</summary>
      
    
    
    
    
    <category term="设计模式" scheme="https://concaxu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之装饰模式</title>
    <link href="https://concaxu.github.io/2024/08/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%85%8D%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://concaxu.github.io/2024/08/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%85%8D%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-08-12T14:39:59.000Z</published>
    <updated>2024-08-12T14:57:12.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之装饰模式"><a href="#设计模式之装饰模式" class="headerlink" title="设计模式之装饰模式"></a><code>设计模式之装饰模式</code></h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><code>定义</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">装饰模式(Decorator Pattern): 动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</span><br><span class="line">注：装饰模式是利用SetComponent 来对对象进行包装的，不需要关心如何被添加到对象链种。</span><br><span class="line">个人理解：就是将一些额外的功能独立出来</span><br></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a><code>优点</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以在不修改现有代码的情况下，动态地添加新功能。</span><br><span class="line">可以将多个装饰器组合使用，以实现更复杂的功能组合。</span><br><span class="line">遵循开闭原则，对扩展开放，对修改关闭</span><br></pre></td></tr></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a><code>代码解释</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Coffee 接口定义了基本的组件接口，包含 getCost() 和 getDescription() 方法。</span><br><span class="line">SimpleCoffee 类是具体组件，实现了 Coffee 接口。</span><br><span class="line">CoffeeDecorator 是一个抽象装饰器类，它也实现了 Coffee 接口，并持有一个 Coffee 对象。</span><br><span class="line">MilkDecorator 和 SugarDecorator 是具体的装饰器，它们扩展了 CoffeeDecorator，并在原有咖啡的基础上添加了新的行为（增加成本和描述）。</span><br><span class="line">在 main 方法中，我们展示了如何使用这些装饰器来动态地创建不同种类的咖啡。</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><code>代码</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleCoffee</span> <span class="keyword">implements</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Simple coffee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CoffeeDecorator</span> <span class="keyword">implements</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Coffee decoratedCoffee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CoffeeDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.decoratedCoffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decoratedCoffee.getCost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decoratedCoffee.getDescription();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MilkDecorator</span> <span class="keyword">extends</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MilkDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getCost() + <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDescription() + <span class="string">&quot;, milk&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SugarDecorator</span> <span class="keyword">extends</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SugarDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getCost() + <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDescription() + <span class="string">&quot;, sugar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecoratorPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">simpleCoffee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCoffee</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Cost: &quot;</span> + simpleCoffee.getCost() + <span class="string">&quot;; Description: &quot;</span> + simpleCoffee.getDescription());</span><br><span class="line"></span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">milkCoffee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MilkDecorator</span>(simpleCoffee);</span><br><span class="line">        System.out.println(<span class="string">&quot;Cost: &quot;</span> + milkCoffee.getCost() + <span class="string">&quot;; Description: &quot;</span> + milkCoffee.getDescription());</span><br><span class="line"></span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">sweetMilkCoffee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SugarDecorator</span>(<span class="keyword">new</span> <span class="title class_">MilkDecorator</span>(<span class="keyword">new</span> <span class="title class_">SimpleCoffee</span>()));</span><br><span class="line">        System.out.println(<span class="string">&quot;Cost: &quot;</span> + sweetMilkCoffee.getCost() + <span class="string">&quot;; Description: &quot;</span> + sweetMilkCoffee.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式之装饰模式&quot;&gt;&lt;a href=&quot;#设计模式之装饰模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之装饰模式&quot;&gt;&lt;/a&gt;&lt;code&gt;设计模式之装饰模式&lt;/code&gt;&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=</summary>
      
    
    
    
    
    <category term="设计模式" scheme="https://concaxu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之依赖倒转原则</title>
    <link href="https://concaxu.github.io/2024/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/"/>
    <id>https://concaxu.github.io/2024/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/</id>
    <published>2024-08-08T15:33:58.000Z</published>
    <updated>2024-08-08T15:46:38.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之依赖倒转原则"><a href="#设计模式之依赖倒转原则" class="headerlink" title="设计模式之依赖倒转原则"></a><code>设计模式之依赖倒转原则</code></h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><code>定义</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">依赖倒转原则：抽象不应该依赖细节，细节更应该依赖抽象。</span><br><span class="line"><span class="comment">// 说白了就是要针对接口变成，不要对现实编程。</span></span><br><span class="line">官方解释：高层模块不应该依赖于低层模块，两者都应该依赖于抽象；抽象不应该依赖于细节，细节应该依赖于抽象。通过依赖抽象（如接口或抽象类）而不是具体实现，代码可以更灵活和易于维护</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="comment">// 高层模块</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过依赖注入的方式，使得高层模块依赖于抽象接口而不是具体实现</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Application</span><span class="params">(MessageService messageService)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.messageService = messageService;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String message, String recipient)</span> &#123;</span><br><span class="line">            <span class="comment">// 调用抽象接口的方法</span></span><br><span class="line">            messageService.sendMessage(message, recipient);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象接口</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, String recipient)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 低层模块1：Email消息服务的具体实现</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, String recipient)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发送邮件到 &quot;</span> + recipient + <span class="string">&quot;，内容：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 低层模块2：短信消息服务的具体实现</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SMSService</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, String recipient)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发送短信到 &quot;</span> + recipient + <span class="string">&quot;，内容：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 客户端代码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 依赖倒转：高层模块依赖于接口，而非具体的实现类</span></span><br><span class="line">        <span class="type">MessageService</span> <span class="variable">emailService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmailService</span>();</span><br><span class="line">        <span class="type">Application</span> <span class="variable">app1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Application</span>(emailService);</span><br><span class="line">        app1.processMessage(<span class="string">&quot;你好，欢迎使用我们的服务！&quot;</span>, <span class="string">&quot;user@example.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MessageService</span> <span class="variable">smsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SMSService</span>();</span><br><span class="line">        <span class="type">Application</span> <span class="variable">app2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Application</span>(smsService);</span><br><span class="line">        app2.processMessage(<span class="string">&quot;您的验证码是123456&quot;</span>, <span class="string">&quot;13800138000&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式之依赖倒转原则&quot;&gt;&lt;a href=&quot;#设计模式之依赖倒转原则&quot; class=&quot;headerlink&quot; title=&quot;设计模式之依赖倒转原则&quot;&gt;&lt;/a&gt;&lt;code&gt;设计模式之依赖倒转原则&lt;/code&gt;&lt;/h2&gt;&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义</summary>
      
    
    
    
    
    <category term="设计模式" scheme="https://concaxu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之开放封闭原则</title>
    <link href="https://concaxu.github.io/2024/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99/"/>
    <id>https://concaxu.github.io/2024/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99/</id>
    <published>2024-08-07T15:15:03.000Z</published>
    <updated>2024-08-07T15:53:17.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之开放封闭原则"><a href="#设计模式之开放封闭原则" class="headerlink" title="设计模式之开放封闭原则"></a><code>设计模式之开放封闭原则</code></h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><code>定义</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开放-封闭原则：是说软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。【ASD】</span><br><span class="line"><span class="comment">// 对于扩展是开放的,对于更改是封闭的。在开发过程中面对需求，对程序的改动是通过增加新代码进行的额，而不是更改现有的代码。</span></span><br><span class="line"><span class="comment">// 有点像一国两制，对于大陆来说社会主义是不可改变的，对于香港来说长期在殖民统治进行彻底的变化是不现实的。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象形状接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩形类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> width, <span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆形类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面积计算器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AreaCalculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">(List&lt;Shape&gt; shapes)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">totalArea</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : shapes) &#123;</span><br><span class="line">            totalArea += shape.area();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主类，用于演示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AreaCalculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AreaCalculator</span>();</span><br><span class="line">        List&lt;Shape&gt; shapes = List.of(<span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">5</span>, <span class="number">10</span>), <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">7</span>));</span><br><span class="line">        <span class="type">double</span> <span class="variable">totalArea</span> <span class="operator">=</span> calculator.calculateArea(shapes);</span><br><span class="line">        System.out.printf(<span class="string">&quot;Total area: %.2f%n&quot;</span>, totalArea);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式之开放封闭原则&quot;&gt;&lt;a href=&quot;#设计模式之开放封闭原则&quot; class=&quot;headerlink&quot; title=&quot;设计模式之开放封闭原则&quot;&gt;&lt;/a&gt;&lt;code&gt;设计模式之开放封闭原则&lt;/code&gt;&lt;/h2&gt;&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义</summary>
      
    
    
    
    
    <category term="设计模式" scheme="https://concaxu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单一职责模式</title>
    <link href="https://concaxu.github.io/2024/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/"/>
    <id>https://concaxu.github.io/2024/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-08-07T14:31:48.000Z</published>
    <updated>2024-08-07T14:41:20.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之单一职责模式"><a href="#设计模式之单一职责模式" class="headerlink" title="设计模式之单一职责模式"></a><code>设计模式之单一职责模式</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单一职责模式顾名思义就是一个类尽量保证只有一个职责。比如生活中相机只用来拍照、MP3只用来听歌。当我们把这些功能如果放在一起的话 就会变得很复杂。代码也一样 会导致代码维护困难。牵一发而动全身。</span></span><br><span class="line"><span class="comment">// 手机的发展有他自己的特点：然而编程时，我们却是要在类的职责分离上多思考，做到单一职责，这样的代码才是真正的以维护、易扩展、易复用、灵活多样。</span></span><br></pre></td></tr></table></figure><p>例子</p><h3 id="员工薪资计算"><a href="#员工薪资计算" class="headerlink" title="员工薪资计算"></a><code>员工薪资计算</code></h3><p>&#x2F;&#x2F; 构建一个员工类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and setters</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 员工数据管理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDAO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">        employees.add(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeEmployee</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        employees.removeIf(employee -&gt; employee.getId().equals(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">findEmployee</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> employees.stream()</span><br><span class="line">                .filter(employee -&gt; employee.getId().equals(id))</span><br><span class="line">                .findFirst()</span><br><span class="line">                .orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 薪资计算类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SalaryCalculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateMonthlySalary</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里可以加入更复杂的薪资计算逻辑</span></span><br><span class="line">        <span class="keyword">return</span> employee.getSalary();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateYearlySalary</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> employee.getSalary() * <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 员工报告生成类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeReporter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateReport</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee Report:\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ID: &quot;</span> + employee.getId() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Name: &quot;</span> + employee.getName() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Salary: $&quot;</span> + employee.getSalary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; main函数（主类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeManagementSystem</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Single.<span class="type">EmployeeDAO</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Single</span>.EmployeeDAO();</span><br><span class="line">        Single.<span class="type">SalaryCalculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Single</span>.SalaryCalculator();</span><br><span class="line">        Single.<span class="type">EmployeeReporter</span> <span class="variable">reporter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Single</span>.EmployeeReporter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加员工</span></span><br><span class="line">        Single.<span class="type">Employee</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Single</span>.Employee(<span class="string">&quot;E001&quot;</span>, <span class="string">&quot;John Doe&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">        dao.addEmployee(john);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算薪资</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">monthlySalary</span> <span class="operator">=</span> calculator.calculateMonthlySalary(john);</span><br><span class="line">        System.out.println(<span class="string">&quot;John&#x27;s monthly salary: $&quot;</span> + monthlySalary);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成报告</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">report</span> <span class="operator">=</span> reporter.generateReport(john);</span><br><span class="line">        System.out.println(report);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式之单一职责模式&quot;&gt;&lt;a href=&quot;#设计模式之单一职责模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之单一职责模式&quot;&gt;&lt;/a&gt;&lt;code&gt;设计模式之单一职责模式&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight</summary>
      
    
    
    
    
    <category term="设计模式" scheme="https://concaxu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之简单工厂模式</title>
    <link href="https://concaxu.github.io/2024/08/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://concaxu.github.io/2024/08/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-08-02T07:26:35.000Z</published>
    <updated>2024-08-07T15:54:56.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之简单工厂模式"><a href="#设计模式之简单工厂模式" class="headerlink" title="设计模式之简单工厂模式"></a><code>设计模式之简单工厂模式</code></h2><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><code>优点</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 包含了必要的 `逻辑判断` 根据外部信息决定究竟应该创建那个具体类的对象。通过使用简单的工厂模式，用户无需了解对象如何创建的，只需要传入必要的信息就可以了</span></span><br></pre></td></tr></table></figure><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><code>缺点</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂类集中了所有实例的创建逻辑，违背了高内聚责任分配原则。随着系统中具体产品类不断增多，势必要不断修改工厂类，不易维护和扩展。也违背了开放封闭原则。</span></span><br><span class="line"><span class="comment">// 注：开放封闭原则：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</span></span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a><code>例子</code></h4><p><strong>实现一个计算器</strong></p><p>&#x2F;&#x2F; 构建一个抽象父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Product 角色，所有实例所共有的公共接口</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> numA;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> numB;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">GetResult</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 构建实现类。具体产品角色，实现 Product 中的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConcreteProduct 角色，实现 Product 中的接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span> <span class="keyword">extends</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">GetResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numA + numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteProduct 角色，实现 Product 中的接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">GetResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numA - numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteProduct 角色，实现 Product 中的接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mul</span> <span class="keyword">extends</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">GetResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numA * numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteProduct 角色，实现 Product 中的接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Div</span> <span class="keyword">extends</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">GetResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numB == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ERROR!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numA / numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 工厂角色（核心）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂角色，简单工厂模式的核心，它负责实现创建所有实例的内部逻辑</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperationFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title function_">CreateOperation</span> <span class="params">(<span class="type">char</span> operate)</span> &#123;</span><br><span class="line">        <span class="type">Operation</span> <span class="variable">oper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span>(operate) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            oper = <span class="keyword">new</span> <span class="title class_">Add</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            oper = <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            oper = <span class="keyword">new</span> <span class="title class_">Mul</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            oper = <span class="keyword">new</span> <span class="title class_">Div</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式之简单工厂模式&quot;&gt;&lt;a href=&quot;#设计模式之简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之简单工厂模式&quot;&gt;&lt;/a&gt;&lt;code&gt;设计模式之简单工厂模式&lt;/code&gt;&lt;/h2&gt;&lt;h4 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点</summary>
      
    
    
    
    
    <category term="设计模式" scheme="https://concaxu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>7月份打工日记</title>
    <link href="https://concaxu.github.io/2024/08/01/7%E6%9C%88%E4%BB%BD%E6%89%93%E5%B7%A5%E6%97%A5%E8%AE%B0/"/>
    <id>https://concaxu.github.io/2024/08/01/7%E6%9C%88%E4%BB%BD%E6%89%93%E5%B7%A5%E6%97%A5%E8%AE%B0/</id>
    <published>2024-08-01T08:16:25.000Z</published>
    <updated>2024-08-12T02:06:00.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动化写字机"><a href="#自动化写字机" class="headerlink" title="自动化写字机"></a><code>自动化写字机</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">采用Python写的自动化程序，打开自动写字机操作。</span><br><span class="line">    <span class="number">1</span>：Java服务端的模板内容的替换</span><br><span class="line">    <span class="number">2</span>：Java与Python的连接选型（WebSocket）</span><br><span class="line">    <span class="number">3</span>：Python读取Java发送的信号 写字模板</span><br><span class="line">    <span class="number">4</span>：Python替换脚本成功后执行模拟点击写字程序。</span><br><span class="line">    <span class="number">5</span>：写字完成后调用摄像头拍照，Java服务端接受Base64照片 上传存储至订单</span><br><span class="line">    其他：笔的选型、打印机的调试（打孔）、摄像机的位置、与瑞鑫联调测试。</span><br></pre></td></tr></table></figure><h2 id="登录采用手机号验证码登录"><a href="#登录采用手机号验证码登录" class="headerlink" title="登录采用手机号验证码登录"></a><code>登录采用手机号验证码登录</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">新增手机号验证码登录逻辑</span><br><span class="line"><span class="number">1</span>：阿里云验证码模板申请、资质认证</span><br><span class="line">    <span class="number">2</span>：代码逻辑的新增（内网外网的校验）</span><br><span class="line">    <span class="number">2</span>-<span class="number">1</span>:写了一个vbs程序向服务器发送请求判断是内网还是外网</span><br><span class="line">    <span class="number">3</span>：验证码的发送</span><br><span class="line">    <span class="number">4</span>：验证码Redis保存、校验</span><br></pre></td></tr></table></figure><h2 id="接入企业微信的投诉页面"><a href="#接入企业微信的投诉页面" class="headerlink" title="接入企业微信的投诉页面"></a><code>接入企业微信的投诉页面</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新增的投诉页面支持查看所有记录 以及用户进行投诉</span><br><span class="line">    <span class="number">1</span>：创建企微BOT</span><br><span class="line">    <span class="number">2</span>：找一个企微发送消息的模板、调用API</span><br><span class="line">    <span class="number">3</span>：将用户投诉推送到企微中</span><br><span class="line">页面内容：订单号、描述、上传聊天记录、手机号等</span><br></pre></td></tr></table></figure><h2 id="自定义页面编辑"><a href="#自定义页面编辑" class="headerlink" title="自定义页面编辑"></a><code>自定义页面编辑</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【自定义编辑需求场景】针对特殊姓氏或者用户特殊要求，名库、字库无法满足名字策划，需原创策划名字。例如：用户需要笔画不超过<span class="number">10</span>画的两个字作为名字组合，可选择名字无，需要即时创新策划。</span><br><span class="line"><span class="number">1</span>:增加自定义界面对话框</span><br><span class="line"><span class="number">2</span>:调用后端接口查询数据库中获取五行、拼音等信息，校验禁用拼音</span><br><span class="line"><span class="number">3</span>:调用文心AI接口获取推荐语</span><br><span class="line"><span class="number">4</span>:导出word后将导出的名字同步至使用历史中</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自动化写字机&quot;&gt;&lt;a href=&quot;#自动化写字机&quot; class=&quot;headerlink&quot; title=&quot;自动化写字机&quot;&gt;&lt;/a&gt;&lt;code&gt;自动化写字机&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="打工日记" scheme="https://concaxu.github.io/categories/%E6%89%93%E5%B7%A5%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="打工日记" scheme="https://concaxu.github.io/tags/%E6%89%93%E5%B7%A5%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>小程序BUG记录</title>
    <link href="https://concaxu.github.io/2024/07/31/%E5%B0%8F%E7%A8%8B%E5%BA%8FBUG%E8%AE%B0%E5%BD%95/"/>
    <id>https://concaxu.github.io/2024/07/31/%E5%B0%8F%E7%A8%8B%E5%BA%8FBUG%E8%AE%B0%E5%BD%95/</id>
    <published>2024-07-31T13:09:53.000Z</published>
    <updated>2024-07-31T13:15:02.157Z</updated>
    
    <content type="html"><![CDATA[<p>​<br>域名非法问题<br>小程序发布必须是合法的https域名 ，尽量是一级，二级域名证书<br>小程序中的前端默认不可以像不在域名列表中的端口发送url请求，例如微信的登录url<br>必须去访问本服务器的后端，通过本服务器的后端做中转站像微信的后端去发送url请 微信支付问题</p><p>public class PayUtil {<br>private static Logger logger &#x3D; Logger.getLogger(“com.wade.common.utils.payUtils.PayUtil”);</p><pre><code>public static Map&lt;String, String&gt; wxPay(String openid, HttpServletRequest request) &#123;    JSONObject json = new JSONObject();    SortedMap&lt;String, String&gt; packages = new TreeMap&lt;&gt;();    try &#123;        //生成的随机字符串        String nonce_str = Util.getRandomStringByLength(16);        //商品名称        String body = WXConst.body;        //获取本机的ip地址        String spbill_create_ip = Util.getIpAddr(request);        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);        String dataStr = dateFormat.format(new Date());        String orderNo = &quot;QM&quot; + dataStr + &quot;-&quot; + Util.getRandomStringByLength(6);        String money = WXConst.MONEY;//支付金额，单位：分，这边需要转成字符串类型，否则后面的签名会失败        SortedMap&lt;String, String&gt; packageParams = new TreeMap&lt;&gt;();        packageParams.put(&quot;appid&quot;, WXConst.appId);        packageParams.put(&quot;nonce_str&quot;, nonce_str);        packageParams.put(&quot;mch_id&quot;, WXConst.mch_id);        packageParams.put(&quot;body&quot;, body);        packageParams.put(&quot;out_trade_no&quot;, orderNo);//商户订单号        packageParams.put(&quot;total_fee&quot;, money);        packageParams.put(&quot;spbill_create_ip&quot;, spbill_create_ip);        packageParams.put(&quot;notify_url&quot;, WXConst.notify_url);        packageParams.put(&quot;trade_type&quot;, WXConst.TRADETYPE);        packageParams.put(&quot;openid&quot;, openid);        packageParams.put(&quot;sign&quot;, createSign(packageParams, WXConst.key));        //调用统一下单接口，并接受返回的结果        String result = PayUtil.httpRequest(WXConst.pay_url, &quot;POST&quot;, getRequestXml(packageParams));        System.out.println(&quot;调试模式_统一下单接口 返回XML数据：&quot; + result);        // 将解析结果存储在HashMap中        Map&lt;String, String&gt; map = PayUtil.doXMLParse(result);        String return_code = (String) map.get(&quot;return_code&quot;);//返回状态码        //返回给移动端需要的参数        if (return_code == &quot;SUCCESS&quot; || return_code.equals(return_code)) &#123;            packages.put(&quot;appId&quot;, map.get(&quot;appid&quot;));            packages.put(&quot;timeStamp&quot;, String.valueOf(System.currentTimeMillis() / 1000));            packages.put(&quot;nonceStr&quot;, map.get(&quot;nonce_str&quot;));            packages.put(&quot;signType&quot;, &quot;MD5&quot;);            packages.put(&quot;package&quot;, &quot;prepay_id=&quot; + map.get(&quot;prepay_id&quot;));            packages.put(&quot;paySign&quot;, createSign(packages, WXConst.key));        &#125;        logger.info(&quot; 第二次 : sign:&quot; + packages.get(&quot;paySign&quot;));    &#125; catch (Exception e) &#123;        e.printStackTrace();        json.put(&quot;errMsg&quot;, &quot;Failed&quot;);    &#125;    return packages;&#125;/** * 获取请求xml * * @param packageParams 请求参数 * @return 请求xml */public static String getRequestXml(SortedMap&lt;String, String&gt; packageParams) &#123;    StringBuilder sb = new StringBuilder();    sb.append(&quot;&lt;xml&gt;&quot;);    Set es = packageParams.entrySet();    for (Object e : es) &#123;        Map.Entry entry = (Map.Entry) e;        String key = (String) entry.getKey();        String value = (String) entry.getValue();        if (&quot;body&quot;.equalsIgnoreCase(key) || &quot;sign&quot;.equalsIgnoreCase(key)) &#123;            sb.append(&quot;&lt;&quot;).append(key).append(&quot;&gt;&quot;).append(&quot;&lt;![CDATA[&quot;).append(value).append(&quot;]]&gt;&lt;/&quot;).append(key).append(&quot;&gt;&quot;);        &#125; else &#123;            sb.append(&quot;&lt;&quot;).append(key).append(&quot;&gt;&quot;).append(value).append(&quot;&lt;/&quot;).append(key).append(&quot;&gt;&quot;);        &#125;    &#125;    sb.append(&quot;&lt;/xml&gt;&quot;);    return sb.toString();&#125;public static String createSign(SortedMap&lt;String, String&gt; packageParams, String apiKey) &#123;    StringBuilder sb = new StringBuilder();    Set es = packageParams.entrySet();    for (Object e : es) &#123;        Map.Entry entry = (Map.Entry) e;        String k = (String) entry.getKey();        String v = (String) entry.getValue();        if ((v != null) &amp;&amp; (!&quot;&quot;.equals(v)) &amp;&amp; (!&quot;sign&quot;.equals(k)) &amp;&amp;                (!&quot;key&quot;.equals(k))) &#123;            sb.append(k).append(&quot;=&quot;).append(v).append(&quot;&amp;&quot;);        &#125;    &#125;    sb.append(&quot;key=&quot;).append(apiKey);    System.err.println(apiKey + &quot;apiKey&quot;);    System.err.println(sb.toString() + &quot;sb.toString()&quot;);    String sign = MD5Utils.getInstance().createMd5(sb.toString())            .toUpperCase();    System.err.println(sign + &quot;sign()&quot;);    return sign;&#125;/** * 签名字符串 * * @param text          需要签名的字符串 * @param key           密钥 * @param input_charset 编码格式 * @return 签名结果 */public static String sign(String text, String key, String input_charset) &#123;    text = text + &quot;&amp;key=&quot; + key;    return DigestUtils.md5Hex(getContentBytes(text, input_charset));&#125;/** * 签名字符串 * * @param text          需要签名的字符串 * @param sign          签名结果 * @param key           密钥 * @param input_charset 编码格式 * @return 签名结果 */public static boolean verify(String text, String sign, String key, String input_charset) &#123;    text = text + key;    String mysign = DigestUtils.md5Hex(getContentBytes(text, input_charset));    if (mysign.equals(sign)) &#123;        return true;    &#125; else &#123;        return false;    &#125;&#125;/** * @param content * @param charset * @return * @throws UnsupportedEncodingException */public static byte[] getContentBytes(String content, String charset) &#123;    if (charset == null || &quot;&quot;.equals(charset)) &#123;        return content.getBytes();    &#125;    try &#123;        return content.getBytes(charset);    &#125; catch (UnsupportedEncodingException e) &#123;        throw new RuntimeException(&quot;MD5签名过程中出现错误,指定的编码集不对,您目前指定的编码集是:&quot; + charset);    &#125;&#125;/** * 生成6位或10位随机数 param codeLength(多少位) * * @return */public static String createCode(int codeLength) &#123;    String code = &quot;&quot;;    for (int i = 0; i &lt; codeLength; i++) &#123;        code += (int) (Math.random() * 9);    &#125;    return code;&#125;@SuppressWarnings(&quot;unused&quot;)private static boolean isValidChar(char ch) &#123;    if ((ch &gt;= &#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;) || (ch &gt;= &#39;A&#39; &amp;&amp; ch &lt;= &#39;Z&#39;) || (ch &gt;= &#39;a&#39; &amp;&amp; ch &lt;= &#39;z&#39;))        return true;    if ((ch &gt;= 0x4e00 &amp;&amp; ch &lt;= 0x7fff) || (ch &gt;= 0x8000 &amp;&amp; ch &lt;= 0x952f))        return true;// 简体中文汉字编码    return false;&#125;/** * 除去数组中的空值和签名参数 * * @param sArray 签名参数组 * @return 去掉空值与签名参数后的新签名参数组 */public static Map&lt;String, String&gt; paraFilter(Map&lt;String, String&gt; sArray) &#123;    Map&lt;String, String&gt; result = new HashMap&lt;String, String&gt;();    if (sArray == null || sArray.size() &lt;= 0) &#123;        return result;    &#125;    for (String key : sArray.keySet()) &#123;        String value = sArray.get(key);        if (value == null || value.equals(&quot;&quot;) || key.equalsIgnoreCase(&quot;sign&quot;)                || key.equalsIgnoreCase(&quot;sign_type&quot;)) &#123;            continue;        &#125;        result.put(key, value);    &#125;    return result;&#125;/** * 把数组所有元素排序，并按照“参数=参数值”的模式用“&amp;”字符拼接成字符串 * * @param params 需要排序并参与字符拼接的参数组 * @return 拼接后字符串 */public static String createLinkString(Map&lt;String, String&gt; params) &#123;    List&lt;String&gt; keys = new ArrayList&lt;String&gt;(params.keySet());    Collections.sort(keys);    String prestr = &quot;&quot;;    for (int i = 0; i &lt; keys.size(); i++) &#123;        String key = keys.get(i);        String value = params.get(key);        if (i == keys.size() - 1) &#123;// 拼接时，不包括最后一个&amp;字符            prestr = prestr + key + &quot;=&quot; + value;        &#125; else &#123;            prestr = prestr + key + &quot;=&quot; + value + &quot;&amp;&quot;;        &#125;    &#125;    return prestr;&#125;/** * @param requestUrl    请求地址 * @param requestMethod 请求方法 * @param outputStr     参数 */public static String httpRequest(String requestUrl, String requestMethod, String outputStr) &#123;    // 创建SSLContext    StringBuffer buffer = null;    try &#123;        URL url = new URL(requestUrl);        HttpURLConnection conn = (HttpURLConnection) url.openConnection();        conn.setRequestMethod(requestMethod);        conn.setDoOutput(true);        conn.setDoInput(true);        conn.connect();        //往服务器端写内容        if (null != outputStr) &#123;            OutputStream os = conn.getOutputStream();            os.write(outputStr.getBytes(&quot;utf-8&quot;));            os.close();        &#125;        // 读取服务器端返回的内容        InputStream is = conn.getInputStream();        InputStreamReader isr = new InputStreamReader(is, &quot;utf-8&quot;);        BufferedReader br = new BufferedReader(isr);        buffer = new StringBuffer();        String line = null;        while ((line = br.readLine()) != null) &#123;            buffer.append(line);        &#125;        br.close();    &#125; catch (Exception e) &#123;        e.printStackTrace();    &#125;    return buffer.toString();&#125;public static String urlEncodeUTF8(String source) &#123;    String result = source;    try &#123;        result = java.net.URLEncoder.encode(source, &quot;UTF-8&quot;);    &#125; catch (UnsupportedEncodingException e) &#123;        // TODO Auto-generated catch block        e.printStackTrace();    &#125;    return result;&#125;/** * 解析xml,返回第一级元素键值对。如果第一级元素有子节点，则此节点的值是子节点的xml数据。 * * @param strxml * @return * @throws IOException */public static Map&lt;String, String&gt; doXMLParse(String strxml) throws Exception &#123;    if (null == strxml || &quot;&quot;.equals(strxml)) &#123;        return null;    &#125;    Map&lt;String, String&gt; m = new HashMap();    InputStream in = String2Inputstream(strxml);    SAXBuilder builder = new SAXBuilder();    Document doc = builder.build(in);    Element root = doc.getRootElement();    List list = root.getChildren();    Iterator it = list.iterator();    while (it.hasNext()) &#123;        Element e = (Element) it.next();        String k = e.getName();        String v = &quot;&quot;;        List children = e.getChildren();        if (children.isEmpty()) &#123;            v = e.getTextNormalize();        &#125; else &#123;            v = getChildrenText(children);        &#125;        m.put(k, v);    &#125;</code></pre><p>&#x2F;&#x2F;关闭流<br>in.close();</p><pre><code>    return m;&#125;/** * 获取子结点的xml * * @param children * @return String */public static String getChildrenText(List children) &#123;    StringBuffer sb = new StringBuffer();    if (!children.isEmpty()) &#123;        Iterator it = children.iterator();        while (it.hasNext()) &#123;            Element e = (Element) it.next();            String name = e.getName();            String value = e.getTextNormalize();            List list = e.getChildren();            sb.append(&quot;&lt;&quot; + name + &quot;&gt;&quot;);            if (!list.isEmpty()) &#123;                sb.append(getChildrenText(list));            &#125;            sb.append(value);            sb.append(&quot;&lt;/&quot; + name + &quot;&gt;&quot;);        &#125;    &#125;    return sb.toString();&#125;public static InputStream String2Inputstream(String str) &#123;    return new ByteArrayInputStream(str.getBytes());&#125;public static void wxNotify(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;    BufferedReader br = new BufferedReader(new InputStreamReader((ServletInputStream) request.getInputStream()));    String line = null;    StringBuilder sb = new StringBuilder();    while ((line = br.readLine()) != null) &#123;        sb.append(line);    &#125;    br.close();    //sb为微信返回的xml    String notityXml = sb.toString();    String resXml = &quot;&quot;;    System.out.println(&quot;接收到的报文：&quot; + notityXml);    Map map = PayUtil.doXMLParse(notityXml);    String returnCode = (String) map.get(&quot;return_code&quot;);    if (&quot;SUCCESS&quot;.equals(returnCode)) &#123;        //验证签名是否正确        if (PayUtil.verify(PayUtil.createLinkString(map), (String) map.get(&quot;sign&quot;), WXConst.key, &quot;utf-8&quot;)) &#123;            /**此处添加自己的业务逻辑代码start**/            /**此处添加自己的业务逻辑代码end**/            //通知微信服务器已经支付成功            resXml = &quot;&lt;xml&gt;&quot; + &quot;&lt;return_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/return_code&gt;&quot;                    + &quot;&lt;return_msg&gt;&lt;![CDATA[OK]]&gt;&lt;/return_msg&gt;&quot; + &quot;&lt;/xml&gt; &quot;;        &#125;    &#125; else &#123;        resXml = &quot;&lt;xml&gt;&quot; + &quot;&lt;return_code&gt;&lt;![CDATA[FAIL]]&gt;&lt;/return_code&gt;&quot;                + &quot;&lt;return_msg&gt;&lt;![CDATA[报文为空]]&gt;&lt;/return_msg&gt;&quot; + &quot;&lt;/xml&gt; &quot;;    &#125;    System.out.println(resXml);    System.out.println(&quot;微信支付回调数据结束&quot;);    BufferedOutputStream out = new BufferedOutputStream(            response.getOutputStream());    out.write(resXml.getBytes());    out.flush();    out.close();&#125;</code></pre><p>}<br>授权获取用户信息转换手机号</p><pre><code>public String getWxLogin(String code) &#123;    WxBaseConst baseConst = new WxBaseConst(&quot;你的appid&quot;, &quot;你的密钥（微信公众平台中生成的）&quot;, code, &quot;authorization_code&quot;);    String params = &quot;appid=&quot; + baseConst.getAppid() + &quot;&amp;secret=&quot; + baseConst.getSecret() + &quot;&amp;js_code=&quot; + baseConst.getJs_code() + &quot;&amp;grant_type=&quot; + baseConst.getGrant_type();    return HttpUtils.sendGet(&quot;https://api.weixin.qq.com/sns/jscode2session&quot;, params);&#125;</code></pre><p>&#x2F;&#x2F; 获取授权手机号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">handleGetPhoneNumber: function (event) &#123;</span><br><span class="line">console.log(<span class="string">&quot;event&quot;</span>, event);</span><br><span class="line"><span class="type">var</span> <span class="variable">that</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">wx.login(&#123;</span><br><span class="line">success: function (res) &#123;</span><br><span class="line"><span class="keyword">if</span> (res.code) &#123;</span><br><span class="line"><span class="comment">// 登录凭证（code）获取成功，可以将code发送到后端进行处理</span></span><br><span class="line"><span class="type">var</span> <span class="variable">code</span> <span class="operator">=</span> res.code;</span><br><span class="line">wx.request(&#123;</span><br><span class="line">url: `$&#123;apiUrl&#125;` + <span class="string">&#x27;/orderMiniProgram/wxLogin?code=&#x27;</span> + code,</span><br><span class="line">method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">success: function (res) &#123;</span><br><span class="line">                           <span class="type">const</span> <span class="variable">sessionKey</span> <span class="operator">=</span> JSON.parse(res.data.msg).session_key;</span><br><span class="line">                           <span class="type">const</span> <span class="variable">openid</span> <span class="operator">=</span> JSON.parse(res.data.msg).openid;</span><br><span class="line"><span class="keyword">if</span> (Object.keys(event).length !== <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (event.detail.errMsg === <span class="string">&#x27;getPhoneNumber:ok&#x27;</span>) &#123;</span><br><span class="line"><span class="type">var</span> <span class="variable">encryptedData</span> <span class="operator">=</span> event.detail.encryptedData;</span><br><span class="line"><span class="type">var</span> <span class="variable">iv</span> <span class="operator">=</span> event.detail.iv;</span><br><span class="line">that.data.form.iv = iv;</span><br><span class="line">that.data.form.encryptedData = encryptedData</span><br><span class="line">that.setData(&#123;</span><br><span class="line">isAuthorized: <span class="literal">true</span></span><br><span class="line">                                   &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// openid获取成功，可以在这里处理逻辑</span></span><br><span class="line">app.openid = openid;</span><br><span class="line">that.data.form.openid = res.data.openid;</span><br><span class="line">that.data.form.sessionKey = sessionKey;</span><br><span class="line">                           <span class="type">const</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RdWXBizDataCrypt</span>(<span class="string">&quot;你的小程序appid&quot;</span>, sessionKey);</span><br><span class="line">                           <span class="type">const</span> <span class="variable">phone</span> <span class="operator">=</span> pc.decryptData(encryptedData, iv);</span><br><span class="line"><span class="keyword">if</span> (phone == <span class="literal">null</span>) &#123;</span><br><span class="line">that.handleGetPhoneNumber;</span><br><span class="line">that.setData(&#123;</span><br><span class="line">isAuthorized: <span class="literal">false</span></span><br><span class="line">                               &#125;)</span><br><span class="line">that.onAuthorizationCancel</span><br><span class="line">wx.showToast(&#123;</span><br><span class="line">title: <span class="string">&#x27;授权发生意外请重新授权&#x27;</span>,</span><br><span class="line">icon: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">duration: <span class="number">2000</span></span><br><span class="line">                               &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">that.data.form.phoneNumber = phone.phoneNumber;</span><br><span class="line">getApp().globalData.AuthToken = phone.phoneNumber;</span><br><span class="line">wx.showToast(&#123;</span><br><span class="line">title: <span class="string">&#x27;授权成功&#x27;</span>,</span><br><span class="line">icon: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">duration: <span class="number">2000</span></span><br><span class="line">                               &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">fail: function (res) &#123;</span><br><span class="line">console.log(<span class="string">&#x27;Response:&#x27;</span>, res);</span><br><span class="line"><span class="comment">// openid获取失败，可以在这里处理逻辑</span></span><br><span class="line">console.log(<span class="string">&#x27;Failed to get openid&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">                   &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 登录凭证（code）获取失败，可以在这里处理逻辑</span></span><br><span class="line">console.log(<span class="string">&#x27;Failed to get login code&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">       &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">小程序和微信公众号unionID获取</span><br><span class="line">小程序的openid获取与公众号的openid获取是一样的道理</span><br><span class="line">获取token---&gt;获取openid</span><br><span class="line">    unionID的获取</span><br><span class="line">    网上说的： 小程序的openid==小程序的unionID （错误说法）</span><br><span class="line">    ！！注意！！在获取unionId的前提是关联二者</span><br><span class="line">    unionID是在同一个微信开放平台下绑定关联的多个程序/公众号 的唯一标识。</span><br><span class="line">    小程序unionID获取：</span><br><span class="line">    比较简单 ：调用wx.login 获取code,</span><br><span class="line">    调用jscode2Session方法获取unionID</span><br><span class="line">    HttpUtils.sendGet(<span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session&quot;</span>, miniParams)</span><br><span class="line">    公众号unionID获取：</span><br><span class="line">    分四步：   </span><br><span class="line">    获取公众号Token</span><br><span class="line">    HttpUtils.sendGet(<span class="string">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span>, tokenParams)</span><br><span class="line">    通过Token获取openid（List 这里拿到的openid是关注微信公众号的所有人的openid）</span><br><span class="line">    HttpUtils.sendGet(<span class="string">&quot;https://api.weixin.qq.com/cgi-bin/user/get&quot;</span>, openIdParams)</span><br><span class="line">    通过遍历openid获取unionId</span><br><span class="line">    openidArray.forEach(openid -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">params</span> <span class="operator">=</span> <span class="string">&quot;access_token=&quot;</span> + token + <span class="string">&quot;&amp;openid=&quot;</span> + openid + <span class="string">&quot;&amp;lang=zh_CN&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> HttpUtils.sendGet(<span class="string">&quot;https://api.weixin.qq.com/cgi-bin/user/info&quot;</span>, params);</span><br><span class="line">    <span class="type">String</span> <span class="variable">unionIdOfficial</span> <span class="operator">=</span> ((JSONObject) JSONObject.parse(userInfo)).get(<span class="string">&quot;unionid&quot;</span>).toString();</span><br><span class="line">    这里对比小程序的unionId是否与公众号unionID相等 相等就可以进行存储关联等操作</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​&lt;br&gt;域名非法问题&lt;br&gt;小程序发布必须是合法的https域名 ，尽量是一级，二级域名证书&lt;br&gt;小程序中的前端默认不可以像不在域名列表中的端口发送url请求，例如微信的登录url&lt;br&gt;必须去访问本服务器的后端，通过本服务器的后端做中转站像微信的后端去发送url请 微</summary>
      
    
    
    
    
    <category term="小程序" scheme="https://concaxu.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信SDK</title>
    <link href="https://concaxu.github.io/2024/07/31/%E5%BE%AE%E4%BF%A1SDK/"/>
    <id>https://concaxu.github.io/2024/07/31/%E5%BE%AE%E4%BF%A1SDK/</id>
    <published>2024-07-31T12:59:03.000Z</published>
    <updated>2024-07-31T13:05:16.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web端调用微信sdk扫一扫功能"><a href="#Web端调用微信sdk扫一扫功能" class="headerlink" title="Web端调用微信sdk扫一扫功能"></a>Web端调用微信sdk扫一扫功能</h2><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>没有调用成功摄像头？<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 我们使用的是wxsdk，那自然是只有在微信中才能打开喽。你要是在浏览器上打开那怎么调用摄像头（很蠢，自己一开始是在浏览器上测试的）</span></span><br><span class="line"><span class="comment">* 另外看一下自己是否成功的鉴权了。如果密钥没错的话那就没问题</span></span><br><span class="line"><span class="comment">* 另外注意参数的大小写问题哦</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>微信公众号订阅号即可 绑定自己的域名（JS接口安全域名），添加IP白名单、获取AppSecret</li><li>在Java后端写一些Utils去向微信发送请求，以达到鉴权获取 ticket</li></ol><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOKEN_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span>;<span class="comment">// 获取access_token</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TICKET_URL</span> <span class="operator">=</span> <span class="string">&quot; https://api.weixin.qq.com/cgi-bin/ticket/getticket&quot;</span>;<span class="comment">// 拿到token以后获取ticket</span></span><br></pre></td></tr></table></figure><p>获取签名的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ruoyi.system.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.core.redis.RedisCache;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.utils.Constants;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.utils.SendToWxUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;JsApiService&quot;)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsApiService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">sign</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里的jsapi_ticket是获取的jsapi_ticket。</span></span><br><span class="line">        <span class="comment">//String ticket = this.getJsApiTicket();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> redisCache.getCacheObject(<span class="string">&quot;ticket&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (object != <span class="literal">null</span>) &#123;</span><br><span class="line">            ticket = object.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            HashMap&lt;String, String&gt; resMap = SendToWxUtils.getTicket();</span><br><span class="line">            ticket = resMap.get(<span class="string">&quot;ticket&quot;</span>);</span><br><span class="line">            redisCache.setCacheObject(<span class="string">&quot;ticket&quot;</span>, ticket);</span><br><span class="line">            redisCache.expire(<span class="string">&quot;ticket&quot;</span>, <span class="number">2</span>, TimeUnit.HOURS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.err.println(<span class="string">&quot;###########读取ticket：&quot;</span> + ticket);</span><br><span class="line">        <span class="comment">//这里签名中的nonceStr要与前端页面config中的nonceStr保持一致，所以这里获取并生成签名之后，还要将其原值传到前端</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">nonceStr</span> <span class="operator">=</span> createNonceStr();</span><br><span class="line">        <span class="comment">//nonceStr</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> createTimestamp();</span><br><span class="line">        String string1;</span><br><span class="line">        <span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意这里参数名必须全部小写，且必须有序</span></span><br><span class="line">        string1 = <span class="string">&quot;jsapi_ticket=&quot;</span> + ticket +</span><br><span class="line">                <span class="string">&quot;&amp;noncestr=&quot;</span> + nonceStr +</span><br><span class="line">                <span class="string">&quot;&amp;timestamp=&quot;</span> + timestamp +</span><br><span class="line">                <span class="string">&quot;&amp;url=&quot;</span> + url;</span><br><span class="line">        System.out.println(<span class="string">&quot;string1:&quot;</span> + string1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">crypt</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">            crypt.reset();</span><br><span class="line">            crypt.update(string1.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            signature = byteToHex(crypt.digest());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resultMap.put(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">        resultMap.put(<span class="string">&quot;jsapi_ticket&quot;</span>, ticket);</span><br><span class="line">        resultMap.put(<span class="string">&quot;nonceStr&quot;</span>, nonceStr);</span><br><span class="line">        resultMap.put(<span class="string">&quot;timestamp&quot;</span>, timestamp);</span><br><span class="line">        resultMap.put(<span class="string">&quot;signature&quot;</span>, signature);</span><br><span class="line">        resultMap.put(<span class="string">&quot;appId&quot;</span>, Constants.APPID);</span><br><span class="line">        System.err.println(<span class="string">&quot;###########打印resultMap：&quot;</span> + resultMap.get(<span class="string">&quot;jsapi_ticket&quot;</span>) + <span class="string">&quot;,&quot;</span> + resultMap.get(<span class="string">&quot;url&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">byteToHex</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] hash)</span> &#123;</span><br><span class="line">        <span class="type">Formatter</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Formatter</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : hash) &#123;</span><br><span class="line">            formatter.format(<span class="string">&quot;%02x&quot;</span>, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> formatter.toString();</span><br><span class="line">        formatter.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">createNonceStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">createTimestamp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.toString(System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端向微信发送请求获取Token、等参数的Utils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ruoyi.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.core.redis.RedisCache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ConnectException;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketTimeoutException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendToWxUtils</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getAccessToken</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> String.format(<span class="string">&quot;appid=%s&amp;secret=%s&amp;grant_type=%s&quot;</span>, Constants.APPID, Constants.SECRET, Constants.GRANT_TYPE);</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> sendGet(Constants.TOKEN_URL, param);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> JSONObject.parseObject(res);</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> obj.getString(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">        System.err.println(<span class="string">&quot;accessToken--&gt;&quot;</span> + accessToken);</span><br><span class="line">        <span class="keyword">return</span> obj.getString(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, String&gt; <span class="title function_">getTicket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> getAccessToken();</span><br><span class="line">        <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> String.format(<span class="string">&quot;access_token=%s&amp;type=jsapi&quot;</span>, accessToken);</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> sendGet(Constants.TICKET_URL, param);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">parsed</span> <span class="operator">=</span> JSONObject.parseObject(res);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ticket</span> <span class="operator">=</span> parsed.getString(<span class="string">&quot;ticket&quot;</span>);</span><br><span class="line">        HashMap&lt;String, String&gt; resMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        resMap.put(<span class="string">&quot;ticket&quot;</span>, ticket);</span><br><span class="line">        <span class="keyword">return</span> resMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sendGet</span><span class="params">(String url, String param)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">urlNameString</span> <span class="operator">=</span> url + <span class="string">&quot;?&quot;</span> + param;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">realUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(urlNameString);</span><br><span class="line">            <span class="type">URLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> realUrl.openConnection();</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line">            connection.connect();</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                result.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ConnectException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;调用HttpUtils.sendGet ConnectException, url=&quot;</span> + url + <span class="string">&quot;,param=&quot;</span> + param + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketTimeoutException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;调用HttpUtils.sendGet SocketTimeoutException, url=&quot;</span> + url + <span class="string">&quot;,param=&quot;</span> + param + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;调用HttpUtils.sendGet IOException, url=&quot;</span> + url + <span class="string">&quot;,param=&quot;</span> + param + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;调用HttpsUtil.sendGet Exception, url=&quot;</span> + url + <span class="string">&quot;,param=&quot;</span> + param + e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;调用in.close Exception, url=&quot;</span> + url + <span class="string">&quot;,param=&quot;</span> + param + ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> String.format(<span class="string">&quot;appid=%s&amp;secret=%s&amp;grant_type=%s&quot;</span>, Constants.APPID, Constants.SECRET, Constants.GRANT_TYPE);</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> sendGet(Constants.TOKEN_URL, param);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> JSONObject.parseObject(res);</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> obj.getString(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">param2</span> <span class="operator">=</span> String.format(<span class="string">&quot;access_token=%s&amp;type=jsapi&quot;</span>, accessToken);</span><br><span class="line">        <span class="type">String</span> <span class="variable">res2</span> <span class="operator">=</span> sendGet(Constants.TICKET_URL, param2);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">parsed</span> <span class="operator">=</span> JSONObject.parseObject(res2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ticket</span> <span class="operator">=</span> parsed.getString(<span class="string">&quot;ticket&quot;</span>);</span><br><span class="line">        System.err.println(accessToken);</span><br><span class="line">        System.err.println(ticket);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一些静态常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ruoyi.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GRANT_TYPE</span> <span class="operator">=</span> <span class="string">&quot;client_credential&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APPID</span> <span class="operator">=</span> <span class="string">&quot;你自己的APPID &quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;你自己的SECRET &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOKEN_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TICKET_URL</span> <span class="operator">=</span> <span class="string">&quot; https://api.weixin.qq.com/cgi-bin/ticket/getticket&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端调用接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/getSign&quot;)</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">getSign</span><span class="params">(<span class="meta">@RequestBody</span> String url)</span> &#123;</span><br><span class="line">    Map&lt;String, String&gt; sign = jsApiService.sign(url);</span><br><span class="line">    <span class="keyword">return</span> AjaxResult.success(sign);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><p>这里我使用的是Vue，先安装 weixin-js-sdk,pip install即可。</p><p>考虑到Android和IOS适配我们需要写一个Config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 判断是否IOS环境</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="comment">//自己封装的请求方法</span></span><br><span class="line"><span class="keyword">import</span> wx <span class="keyword">from</span> <span class="string">&quot;weixin-js-sdk&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getSign &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/system/tab&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isIOS</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> isIphone = navigator.<span class="property">userAgent</span>.<span class="title function_">includes</span>(<span class="string">&quot;iPhone&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> isIpad = navigator.<span class="property">userAgent</span>.<span class="title function_">includes</span>(<span class="string">&quot;iPad&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> isIphone || isIpad;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 获取微信签名，注入权限验证配置</span></span><br><span class="line"><span class="comment">* 这里我用到的是微信扫一扫功能。所以jsApiList: [&#x27;checkJsApi&#x27;, &#x27;scanQRCode&#x27;]就写了这么多</span></span><br><span class="line"><span class="comment">* 具体用到的什么功能向里边添加即可</span></span><br><span class="line"><span class="comment">* 可以参考Weixin官网提供的一些接口 https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">requestWxStr</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">getSign</span>(&#123; <span class="attr">url</span>: <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">split</span>(<span class="string">&#x27;#&#x27;</span>)[<span class="number">0</span>] &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取签名信息成功&#x27;</span>, res)</span><br><span class="line">    wx.<span class="title function_">config</span>(&#123;</span><br><span class="line">      <span class="attr">debug</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">appId</span>: res.<span class="property">data</span>.<span class="property">appId</span>,</span><br><span class="line">      <span class="attr">timestamp</span>: res.<span class="property">data</span>.<span class="property">timestamp</span>,</span><br><span class="line">      <span class="attr">nonceStr</span>: res.<span class="property">data</span>.<span class="property">nonceStr</span>,</span><br><span class="line">      <span class="attr">signature</span>: res.<span class="property">data</span>.<span class="property">signature</span>,</span><br><span class="line">      <span class="attr">jsApiList</span>: [<span class="string">&#x27;checkJsApi&#x27;</span>, <span class="string">&#x27;scanQRCode&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取签名信息失败&#x27;</span>, error)</span><br><span class="line">  &#125;)</span><br><span class="line">  wx.<span class="title function_">ready</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    wx.<span class="title function_">checkJsApi</span>(&#123;</span><br><span class="line">      <span class="attr">jsApiList</span>: [<span class="string">&#x27;scanQRCode&#x27;</span>], <span class="comment">// 需要检测的JS接口列表，所有JS接口列表见附录2,</span></span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;扫一扫准备就绪&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Vue组件中使用，这里我用到的是微信扫一扫功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx <span class="keyword">from</span> <span class="string">&#x27;weixin-js-sdk&#x27;</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_">isIOS</span>()) &#123;</span><br><span class="line">        <span class="title function_">requestWxStr</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">scanBarCode</span>(<span class="params">row, col</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scanData</span>.<span class="property">rowNumber</span> = row</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scanData</span>.<span class="property">columnNumber</span> = col</span><br><span class="line">      wx.<span class="title function_">scanQRCode</span>(&#123;</span><br><span class="line">          <span class="attr">needResult</span>: <span class="number">1</span>, <span class="comment">// 默认为0，扫描结果由微信处理，1则直接返回扫描结果，</span></span><br><span class="line">          <span class="attr">scanType</span>: [<span class="string">&#x27;barCode&#x27;</span>], <span class="comment">// 可以指定扫二维码还是一维码，默认二者都有</span></span><br><span class="line">          <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> parts = res.<span class="property">resultStr</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="comment">// 提取条形码值</span></span><br><span class="line">            that.<span class="property">scanData</span>.<span class="property">content</span> = parts[<span class="number">1</span>]</span><br><span class="line">            that.<span class="property">isOpen</span> = <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;识别error&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>然后就没有然后了，就搞定了。注意需要发布到线上才能测试，可以打印一些log测试。alert(xxx);</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Web端调用微信sdk扫一扫功能&quot;&gt;&lt;a href=&quot;#Web端调用微信sdk扫一扫功能&quot; class=&quot;headerlink&quot; title=&quot;Web端调用微信sdk扫一扫功能&quot;&gt;&lt;/a&gt;Web端调用微信sdk扫一扫功能&lt;/h2&gt;&lt;h2 id=&quot;常见问题&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="学习笔记" scheme="https://concaxu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="微信SDK" scheme="https://concaxu.github.io/tags/%E5%BE%AE%E4%BF%A1SDK/"/>
    
  </entry>
  
  <entry>
    <title>Hexo笔记</title>
    <link href="https://concaxu.github.io/2024/07/31/Hexo%E7%AC%94%E8%AE%B0/"/>
    <id>https://concaxu.github.io/2024/07/31/Hexo%E7%AC%94%E8%AE%B0/</id>
    <published>2024-07-31T12:33:19.000Z</published>
    <updated>2024-07-31T12:47:03.964Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo-g-Hexo-generate"><a href="#Hexo-g-Hexo-generate" class="headerlink" title="Hexo g/Hexo generate"></a><code>Hexo g/Hexo generate</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行通过md生成index.html资源 会在根目录下生成<span class="keyword">public</span>文件夹</span><br></pre></td></tr></table></figure><h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a><code>hexo clean</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">清楚缓存</span><br></pre></td></tr></table></figure><h3 id="hexo-s-hexo-server"><a href="#hexo-s-hexo-server" class="headerlink" title="hexo s/hexo server"></a><code>hexo s/hexo server</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本地启动</span><br></pre></td></tr></table></figure><h3 id="hexo-d-hexo-deploy"><a href="#hexo-d-hexo-deploy" class="headerlink" title="hexo d / hexo deploy"></a><code>hexo d / hexo deploy</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">部署至线上 本地生成.deploy.git 文件夹上传至github</span><br></pre></td></tr></table></figure><h3 id="hexo-new-title"><a href="#hexo-new-title" class="headerlink" title="hexo new title"></a><code>hexo new title</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生成文章 eg: hexo <span class="keyword">new</span> <span class="title class_">First</span>,会生成一个名称为first.md的markdown</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a><code>Delete</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只需要将本地的source/_posts文件夹下的对应文章的资源删除就行</span><br><span class="line">之后执行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s <span class="comment">// 一定要先 clean，防止灵异事件发生</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Hexo-g-Hexo-generate&quot;&gt;&lt;a href=&quot;#Hexo-g-Hexo-generate&quot; class=&quot;headerlink&quot; title=&quot;Hexo g/Hexo generate&quot;&gt;&lt;/a&gt;&lt;code&gt;Hexo g/Hexo generate</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://concaxu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Hexo" scheme="https://concaxu.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>YoloBaseNode</title>
    <link href="https://concaxu.github.io/2024/07/18/YoloBaseNode/"/>
    <id>https://concaxu.github.io/2024/07/18/YoloBaseNode/</id>
    <published>2024-07-18T06:38:36.000Z</published>
    <updated>2024-07-31T12:47:03.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Yolo的任务分类"><a href="#Yolo的任务分类" class="headerlink" title="Yolo的任务分类"></a>Yolo的任务分类</h1><h2 id="Train（训练）"><a href="#Train（训练）" class="headerlink" title="Train（训练）"></a>Train（训练）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>YOLOv8 中的 “训练 “模式充分利用现代硬件能力，专为高效训练物体检测模型而设计。可以训练出自己的模型</p></blockquote><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load a model</span></span><br><span class="line">model = YOLO(<span class="string">&quot;yolov8n.yaml&quot;</span>)  <span class="comment"># build a new model from YAML</span></span><br><span class="line">model = YOLO(<span class="string">&quot;yolov8n.pt&quot;</span>)  <span class="comment"># load a pretrained model (recommended for training)</span></span><br><span class="line">model = YOLO(<span class="string">&quot;yolov8n.yaml&quot;</span>).load(<span class="string">&quot;yolov8n.pt&quot;</span>)  <span class="comment"># build from YAML and transfer weights</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Train the model</span></span><br><span class="line">results = model.train(data=<span class="string">&quot;coco8.yaml&quot;</span>, epochs=<span class="number">100</span>, imgsz=<span class="number">640</span>)</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><div class="md-typeset__table"><table><thead><tr><th>参数</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code data-wg-notranslate="">model</code></td><td><code data-wg-notranslate="">None</code></td><td>指定用于训练的模型文件。接受指向 <code data-wg-notranslate="">.pt</code> 预训练模型或 <code data-wg-notranslate="">.yaml</code> 配置文件。对于定义模型结构或初始化权重至关重要。</td></tr><tr><td><code data-wg-notranslate="">data</code></td><td><code data-wg-notranslate="">None</code></td><td>数据集配置文件的路径（例如 <code data-wg-notranslate="">coco8.yaml</code>).该文件包含特定于数据集的参数，包括训练数据和验证数据的路径、类名和类数。</td></tr><tr><td><code data-wg-notranslate="">epochs</code></td><td><code data-wg-notranslate="">100</code></td><td>训练历元总数。每个历元代表对整个数据集进行一次完整的训练。调整该值会影响训练时间和模型性能。</td></tr><tr><td><code data-wg-notranslate="">time</code></td><td><code data-wg-notranslate="">None</code></td><td>最长训练时间（小时）。如果设置了该值，则会覆盖 <code data-wg-notranslate="">epochs</code> 参数，允许训练在指定的持续时间后自动停止。对于时间有限的训练场景非常有用。</td></tr><tr><td><code data-wg-notranslate="">patience</code></td><td><code data-wg-notranslate="">100</code></td><td>在验证指标没有改善的情况下，提前停止训练所需的历元数。当性能趋于平稳时停止训练，有助于防止过度拟合。</td></tr><tr><td><code data-wg-notranslate="">batch</code></td><td><code data-wg-notranslate="">16</code></td><td>训练的批量大小，表示在更新模型内部参数之前要处理多少张图像。自动批处理 (<code data-wg-notranslate="">batch=-1</code>)会根据 GPU 内存可用性动态调整批处理大小。</td></tr><tr><td><code data-wg-notranslate="">imgsz</code></td><td><code data-wg-notranslate="">640</code></td><td>用于训练的目标图像尺寸。所有图像在输入模型前都会被调整到这一尺寸。影响模型精度和计算复杂度。</td></tr><tr><td><code data-wg-notranslate="">save</code></td><td><code data-wg-notranslate="">True</code></td><td>可保存训练检查点和最终模型权重。这对恢复训练或模型部署非常有用。</td></tr><tr><td><code data-wg-notranslate="">save_period</code></td><td><code data-wg-notranslate="">-1</code></td><td>保存模型检查点的频率，以 epochs 为单位。值为-1 时将禁用此功能。该功能适用于在长时间训练过程中保存临时模型。</td></tr><tr><td><code data-wg-notranslate="">cache</code></td><td><code data-wg-notranslate="">False</code></td><td>在内存中缓存数据集图像 (<code data-wg-notranslate="">True</code>/<code data-wg-notranslate="">ram</code>）、磁盘 (<code data-wg-notranslate="">disk</code>），或禁用它 (<code data-wg-notranslate="">False</code>).通过减少磁盘 I/O 提高训练速度，但代价是增加内存使用量。</td></tr><tr><td><code data-wg-notranslate="">device</code></td><td><code data-wg-notranslate="">None</code></td><td>指定用于训练的计算设备：单个 GPU (<code data-wg-notranslate="">device=0</code>）、多个 GPU (<code data-wg-notranslate="">device=0,1</code>)、CPU (<code data-wg-notranslate="">device=cpu</code>)，或苹果芯片的 MPS (<code data-wg-notranslate="">device=mps</code>).</td></tr><tr><td><code data-wg-notranslate="">workers</code></td><td><code data-wg-notranslate="">8</code></td><td>加载数据的工作线程数（每 <code data-wg-notranslate="">RANK</code> 多 GPU 训练）。影响数据预处理和输入模型的速度，尤其适用于多 GPU 设置。</td></tr><tr><td><code data-wg-notranslate="">project</code></td><td><code data-wg-notranslate="">None</code></td><td>保存训练结果的项目目录名称。允许有组织地存储不同的实验。</td></tr><tr><td><code data-wg-notranslate="">name</code></td><td><code data-wg-notranslate="">None</code></td><td>训练运行的名称。用于在项目文件夹内创建一个子目录，用于存储训练日志和输出结果。</td></tr><tr><td><code data-wg-notranslate="">exist_ok</code></td><td><code data-wg-notranslate="">False</code></td><td>如果为 True，则允许覆盖现有的项目/名称目录。这对迭代实验非常有用，无需手动清除之前的输出。</td></tr><tr><td><code data-wg-notranslate="">pretrained</code></td><td><code data-wg-notranslate="">True</code></td><td>决定是否从预处理模型开始训练。可以是布尔值，也可以是加载权重的特定模型的字符串路径。提高训练效率和模型性能。</td></tr><tr><td><code data-wg-notranslate="">optimizer</code></td><td><code data-wg-notranslate="">'auto'</code></td><td>为培训选择优化器。选项包括 <code data-wg-notranslate="">SGD</code>, <code data-wg-notranslate="">Adam</code>, <code data-wg-notranslate="">AdamW</code>, <code data-wg-notranslate="">NAdam</code>, <code data-wg-notranslate="">RAdam</code>, <code data-wg-notranslate="">RMSProp</code> 等，或 <code data-wg-notranslate="">auto</code> 用于根据模型配置进行自动选择。影响收敛速度和稳定性</td></tr><tr><td><code data-wg-notranslate="">verbose</code></td><td><code data-wg-notranslate="">False</code></td><td>在训练过程中启用冗长输出，提供详细日志和进度更新。有助于调试和密切监控培训过程。</td></tr><tr><td><code data-wg-notranslate="">seed</code></td><td><code data-wg-notranslate="">0</code></td><td>为训练设置随机种子，确保在相同配置下运行的结果具有可重复性。</td></tr><tr><td><code data-wg-notranslate="">deterministic</code></td><td><code data-wg-notranslate="">True</code></td><td>强制使用确定性算法，确保可重复性，但由于对非确定性算法的限制，可能会影响性能和速度。</td></tr><tr><td><code data-wg-notranslate="">single_cls</code></td><td><code data-wg-notranslate="">False</code></td><td>在训练过程中将多类数据集中的所有类别视为单一类别。适用于二元分类任务，或侧重于对象的存在而非分类。</td></tr><tr><td><code data-wg-notranslate="">rect</code></td><td><code data-wg-notranslate="">False</code></td><td>可进行矩形训练，优化批次组成以减少填充。这可以提高效率和速度，但可能会影响模型的准确性。</td></tr><tr><td><code data-wg-notranslate="">cos_lr</code></td><td><code data-wg-notranslate="">False</code></td><td>利用余弦学习率调度器，根据历时的余弦曲线调整学习率。这有助于管理学习率，实现更好的收敛。</td></tr><tr><td><code data-wg-notranslate="">close_mosaic</code></td><td><code data-wg-notranslate="">10</code></td><td>在训练完成前禁用最后 N 个历元的马赛克数据增强以稳定训练。设置为 0 则禁用此功能。</td></tr><tr><td><code data-wg-notranslate="">resume</code></td><td><code data-wg-notranslate="">False</code></td><td>从上次保存的检查点恢复训练。自动加载模型权重、优化器状态和历时计数，无缝继续训练。</td></tr><tr><td><code data-wg-notranslate="">amp</code></td><td><code data-wg-notranslate="">True</code></td><td>启用自动混合精度 (AMP) 训练，可减少内存使用量并加快训练速度，同时将对精度的影响降至最低。</td></tr><tr><td><code data-wg-notranslate="">fraction</code></td><td><code data-wg-notranslate="">1.0</code></td><td>指定用于训练的数据集的部分。允许在完整数据集的子集上进行训练，这对实验或资源有限的情况非常有用。</td></tr><tr><td><code data-wg-notranslate="">profile</code></td><td><code data-wg-notranslate="">False</code></td><td>在训练过程中，可对ONNX 和TensorRT 速度进行剖析，有助于优化模型部署。</td></tr><tr><td><code data-wg-notranslate="">freeze</code></td><td><code data-wg-notranslate="">None</code></td><td>冻结模型的前 N 层或按索引指定的层，从而减少可训练参数的数量。这对微调或迁移学习非常有用。</td></tr><tr><td><code data-wg-notranslate="">lr0</code></td><td><code data-wg-notranslate="">0.01</code></td><td>初始学习率（即 <code data-wg-notranslate="">SGD=1E-2</code>, <code data-wg-notranslate="">Adam=1E-3</code>) .调整这个值对优化过程至关重要，会影响模型权重的更新速度。</td></tr><tr><td><code data-wg-notranslate="">lrf</code></td><td><code data-wg-notranslate="">0.01</code></td><td>最终学习率占初始学习率的百分比 = (<code data-wg-notranslate="">lr0 * lrf</code>)，与调度程序结合使用，随着时间的推移调整学习率。</td></tr><tr><td><code data-wg-notranslate="">momentum</code></td><td><code data-wg-notranslate="">0.937</code></td><td>用于 SGD 的动量因子，或用于 Adam 优化器的 beta1，用于将过去的梯度纳入当前更新。</td></tr><tr><td><code data-wg-notranslate="">weight_decay</code></td><td><code data-wg-notranslate="">0.0005</code></td><td>L2 正则化项，对大权重进行惩罚，以防止过度拟合。</td></tr><tr><td><code data-wg-notranslate="">warmup_epochs</code></td><td><code data-wg-notranslate="">3.0</code></td><td>学习率预热的历元数，学习率从低值逐渐增加到初始学习率，以在早期稳定训练。</td></tr><tr><td><code data-wg-notranslate="">warmup_momentum</code></td><td><code data-wg-notranslate="">0.8</code></td><td>热身阶段的初始动力，在热身期间逐渐调整到设定动力。</td></tr><tr><td><code data-wg-notranslate="">warmup_bias_lr</code></td><td><code data-wg-notranslate="">0.1</code></td><td>热身阶段的偏置参数学习率，有助于稳定初始历元的模型训练。</td></tr><tr><td><code data-wg-notranslate="">box</code></td><td><code data-wg-notranslate="">7.5</code></td><td>损失函数中边框损失部分的权重，影响对准确预测边框坐标的重视程度。</td></tr><tr><td><code data-wg-notranslate="">cls</code></td><td><code data-wg-notranslate="">0.5</code></td><td>分类损失在总损失函数中的权重，影响正确分类预测相对于其他部分的重要性。</td></tr><tr><td><code data-wg-notranslate="">dfl</code></td><td><code data-wg-notranslate="">1.5</code></td><td>分布焦点损失权重，在某些YOLO 版本中用于精细分类。</td></tr><tr><td><code data-wg-notranslate="">pose</code></td><td><code data-wg-notranslate="">12.0</code></td><td>姿态损失在姿态估计模型中的权重，影响着准确预测姿态关键点的重点。</td></tr><tr><td><code data-wg-notranslate="">kobj</code></td><td><code data-wg-notranslate="">2.0</code></td><td>姿态估计模型中关键点对象性损失的权重，平衡检测可信度与姿态精度。</td></tr><tr><td><code data-wg-notranslate="">label_smoothing</code></td><td><code data-wg-notranslate="">0.0</code></td><td>应用标签平滑，将硬标签软化为目标标签和标签均匀分布的混合标签，可以提高泛化效果。</td></tr><tr><td><code data-wg-notranslate="">nbs</code></td><td><code data-wg-notranslate="">64</code></td><td>用于损耗正常化的标称批量大小。</td></tr><tr><td><code data-wg-notranslate="">overlap_mask</code></td><td><code data-wg-notranslate="">True</code></td><td>决定在训练过程中分割掩码是否应该重叠，适用于实例分割任务。</td></tr><tr><td><code data-wg-notranslate="">mask_ratio</code></td><td><code data-wg-notranslate="">4</code></td><td>分割掩码的下采样率，影响训练时使用的掩码分辨率。</td></tr><tr><td><code data-wg-notranslate="">dropout</code></td><td><code data-wg-notranslate="">0.0</code></td><td>分类任务中正则化的丢弃率，通过在训练过程中随机省略单元来防止过拟合。</td></tr><tr><td><code data-wg-notranslate="">val</code></td><td><code data-wg-notranslate="">True</code></td><td>可在训练过程中进行验证，以便在单独的数据集上对模型性能进行定期评估。</td></tr><tr><td><code data-wg-notranslate="">plots</code></td><td><code data-wg-notranslate="">False</code></td><td>生成并保存训练和验证指标图以及预测示例图，以便直观地了解模型性能和学习进度。</td></tr></tbody></table></div><h3 id="超参数"><a href="#超参数" class="headerlink" title="超参数"></a>超参数</h3><div class="md-typeset__scrollwrap"><div class="md-typeset__table"><table><thead><tr><th>参数名</th><th>类型</th><th>默认值</th><th>范围</th><th>说明</th></tr></thead><tbody><tr><td><code data-wg-notranslate="">hsv_h</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.015</code></td><td><code data-wg-notranslate="">0.0 - 1.0</code></td><td>通过色轮的一部分来调整图像的色调，从而引入色彩的可变性。帮助模型在不同的光照条件下通用。</td></tr><tr><td><code data-wg-notranslate="">hsv_s</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.7</code></td><td><code data-wg-notranslate="">0.0 - 1.0</code></td><td>改变图像饱和度的一部分，影响色彩的强度。可用于模拟不同的环境条件。</td></tr><tr><td><code data-wg-notranslate="">hsv_v</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.4</code></td><td><code data-wg-notranslate="">0.0 - 1.0</code></td><td>将图像的数值（亮度）修改一部分，帮助模型在不同的光照条件下表现良好。</td></tr><tr><td><code data-wg-notranslate="">degrees</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.0</code></td><td><code data-wg-notranslate="">-180 - +180</code></td><td>在指定的度数范围内随机旋转图像，提高模型识别不同方向物体的能力。</td></tr><tr><td><code data-wg-notranslate="">translate</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.1</code></td><td><code data-wg-notranslate="">0.0 - 1.0</code></td><td>以图像大小的一小部分水平和垂直平移图像，帮助学习检测部分可见的物体。</td></tr><tr><td><code data-wg-notranslate="">scale</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.5</code></td><td><code data-wg-notranslate="">&gt;=0.0</code></td><td>通过增益因子缩放图像，模拟物体与摄像机的不同距离。</td></tr><tr><td><code data-wg-notranslate="">shear</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.0</code></td><td><code data-wg-notranslate="">-180 - +180</code></td><td>按指定角度剪切图像，模拟从不同角度观察物体的效果。</td></tr><tr><td><code data-wg-notranslate="">perspective</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.0</code></td><td><code data-wg-notranslate="">0.0 - 0.001</code></td><td>对图像进行随机透视变换，增强模型理解三维空间中物体的能力。</td></tr><tr><td><code data-wg-notranslate="">flipud</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.0</code></td><td><code data-wg-notranslate="">0.0 - 1.0</code></td><td>以指定的概率将图像翻转过来，在不影响物体特征的情况下增加数据的可变性。</td></tr><tr><td><code data-wg-notranslate="">fliplr</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.5</code></td><td><code data-wg-notranslate="">0.0 - 1.0</code></td><td>以指定的概率将图像从左到右翻转，这对学习对称物体和增加数据集多样性非常有用。</td></tr><tr><td><code data-wg-notranslate="">bgr</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.0</code></td><td><code data-wg-notranslate="">0.0 - 1.0</code></td><td>以指定的概率将图像通道从 RGB 翻转到 BGR，用于提高对错误通道排序的稳健性。</td></tr><tr><td><code data-wg-notranslate="">mosaic</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">1.0</code></td><td><code data-wg-notranslate="">0.0 - 1.0</code></td><td>将四幅训练图像合成一幅，模拟不同的场景构成和物体互动。对复杂场景的理解非常有效。</td></tr><tr><td><code data-wg-notranslate="">mixup</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.0</code></td><td><code data-wg-notranslate="">0.0 - 1.0</code></td><td>混合两幅图像及其标签，创建合成图像。通过引入标签噪声和视觉变化，增强模型的泛化能力。</td></tr><tr><td><code data-wg-notranslate="">copy_paste</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.0</code></td><td><code data-wg-notranslate="">0.0 - 1.0</code></td><td>从一幅图像中复制物体并粘贴到另一幅图像上，用于增加物体实例和学习物体遮挡。</td></tr><tr><td><code data-wg-notranslate="">auto_augment</code></td><td><code data-wg-notranslate="">str</code></td><td><code data-wg-notranslate="">randaugment</code></td><td>-</td><td>自动应用预定义的增强策略 (<code data-wg-notranslate="">randaugment</code>, <code data-wg-notranslate="">autoaugment</code>, <code data-wg-notranslate="">augmix</code>)，通过丰富视觉特征来优化分类任务。</td></tr><tr><td><code data-wg-notranslate="">erasing</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.4</code></td><td><code data-wg-notranslate="">0.0 - 0.9</code></td><td>在分类训练过程中随机擦除部分图像，鼓励模型将识别重点放在不明显的特征上。</td></tr><tr><td><code data-wg-notranslate="">crop_fraction</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">1.0</code></td><td><code data-wg-notranslate="">0.1 - 1.0</code></td><td>将分类图像裁剪为其大小的一小部分，以突出中心特征并适应对象比例，减少背景干扰。</td></tr></tbody></table></div></div><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">epoch、 imgsz、 save、 device、 workers</span><br></pre></td></tr></table></figure><h2 id="Val（评估）"><a href="#Val（评估）" class="headerlink" title="Val（评估）"></a>Val（评估）</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><blockquote><p>Val 模式提供了一套强大的工具和指标，用于评估对象检测模型的性能</p></blockquote><h3 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load a model</span></span><br><span class="line">model = YOLO(<span class="string">&quot;yolov8n.pt&quot;</span>)  <span class="comment"># load an official model</span></span><br><span class="line">model = YOLO(<span class="string">&quot;path/to/best.pt&quot;</span>)  <span class="comment"># load a custom model</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Validate the model</span></span><br><span class="line">metrics = model.val()  <span class="comment"># no arguments needed, dataset and settings remembered</span></span><br><span class="line">metrics.box.<span class="built_in">map</span>  <span class="comment"># map50-95</span></span><br><span class="line">metrics.box.map50  <span class="comment"># map50</span></span><br><span class="line">metrics.box.map75  <span class="comment"># map75</span></span><br><span class="line">metrics.box.maps  <span class="comment"># a list contains map50-95 of each category</span></span><br></pre></td></tr></table></figure><h3 id="参数-超参数"><a href="#参数-超参数" class="headerlink" title="参数&#x2F;超参数"></a>参数&#x2F;超参数</h3><div class="md-typeset__table"><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code data-wg-notranslate="">data</code></td><td><code data-wg-notranslate="">str</code></td><td><code data-wg-notranslate="">None</code></td><td>指定数据集配置文件的路径（如 <code data-wg-notranslate="">coco8.yaml</code>).该文件包括验证数据的路径、类名和类数。</td></tr><tr><td><code data-wg-notranslate="">imgsz</code></td><td><code data-wg-notranslate="">int</code></td><td><code data-wg-notranslate="">640</code></td><td>定义输入图像的尺寸。所有图像在处理前都会调整到这一尺寸。</td></tr><tr><td><code data-wg-notranslate="">batch</code></td><td><code data-wg-notranslate="">int</code></td><td><code data-wg-notranslate="">16</code></td><td>设置每批图像的数量。使用 <code data-wg-notranslate="">-1</code> 的自动批处理功能，可根据 GPU 内存可用性自动调整。</td></tr><tr><td><code data-wg-notranslate="">save_json</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>如果 <code data-wg-notranslate="">True</code>此外，还可将结果保存到 JSON 文件中，以便进一步分析或与其他工具集成。</td></tr><tr><td><code data-wg-notranslate="">save_hybrid</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>如果 <code data-wg-notranslate="">True</code>，保存混合版本的标签，将原始注释与额外的模型预测相结合。</td></tr><tr><td><code data-wg-notranslate="">conf</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.001</code></td><td>设置检测的最小置信度阈值。置信度低于此阈值的检测将被丢弃。</td></tr><tr><td><code data-wg-notranslate="">iou</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.6</code></td><td>设置非最大抑制 (NMS) 的交叉重叠 (IoU) 阈值。有助于减少重复检测。</td></tr><tr><td><code data-wg-notranslate="">max_det</code></td><td><code data-wg-notranslate="">int</code></td><td><code data-wg-notranslate="">300</code></td><td>限制每幅图像的最大检测次数。在密度较高的场景中非常有用，可以防止检测次数过多。</td></tr><tr><td><code data-wg-notranslate="">half</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">True</code></td><td>可进行半精度（FP16）计算，减少内存使用量，在提高速度的同时，将对精度的影响降至最低。</td></tr><tr><td><code data-wg-notranslate="">device</code></td><td><code data-wg-notranslate="">str</code></td><td><code data-wg-notranslate="">None</code></td><td>指定验证设备 (<code data-wg-notranslate="">cpu</code>, <code data-wg-notranslate="">cuda:0</code>等）。可灵活利用 CPU 或 GPU 资源。</td></tr><tr><td><code data-wg-notranslate="">dnn</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>如果 <code data-wg-notranslate="">True</code>它使用 OpenCV DNN 模块进行ONNX 模型推断，为PyTorch 推断方法提供了一种替代方法。</td></tr><tr><td><code data-wg-notranslate="">plots</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>当设置为 <code data-wg-notranslate="">True</code>此外，它还能生成并保存预测结果与地面实况的对比图，以便对模型的性能进行可视化评估。</td></tr><tr><td><code data-wg-notranslate="">rect</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>如果 <code data-wg-notranslate="">True</code>该软件使用矩形推理进行批处理，减少了填充，可能会提高速度和效率。</td></tr><tr><td><code data-wg-notranslate="">split</code></td><td><code data-wg-notranslate="">str</code></td><td><code data-wg-notranslate="">val</code></td><td>确定用于验证的数据集分割 (<code data-wg-notranslate="">val</code>, <code data-wg-notranslate="">test</code>或 <code data-wg-notranslate="">train</code>).可灵活选择数据段进行性能评估。</td></tr></tbody></table></div><h3 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">batch 、 conf、 IoU、 half</span><br></pre></td></tr></table></figure><h2 id="Predict-预测"><a href="#Predict-预测" class="headerlink" title="Predict(预测)"></a>Predict(预测)</h2><h3 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load a pretrained YOLOv8n model</span></span><br><span class="line">model = YOLO(<span class="string">&quot;yolov8n.pt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run inference on &#x27;bus.jpg&#x27; with arguments</span></span><br><span class="line">result = model.predict(<span class="string">&quot;bus.jpg&quot;</span>, save=<span class="literal">True</span>, imgsz=<span class="number">320</span>, conf=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># Value of result</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图像原始大小:&quot;</span>, result.orig_shape)</span><br><span class="line">    data_numpy = result.boxes.data.cpu().numpy()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_numpy:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;data&quot;</span>, data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;左上角X轴坐标:&quot;</span>, data[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;左上角Y轴坐标:&quot;</span>, data[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;右下角X轴坐标:&quot;</span>, data[<span class="number">2</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;右下角Y轴坐标:&quot;</span>, data[<span class="number">3</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;置---信---度:&quot;</span>, data[<span class="number">4</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;检测到的类有:&quot;</span>,  data[<span class="number">5</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><div class="md-typeset__table"><table><thead><tr><th>论据</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code data-wg-notranslate="">source</code></td><td><code data-wg-notranslate="">str</code></td><td><code data-wg-notranslate="">'ultralytics/assets'</code></td><td>指定推理的数据源。可以是图像路径、视频文件、目录、URL 或用于实时馈送的设备 ID。支持多种格式和来源，可灵活应用于不同类型的输入。</td></tr><tr><td><code data-wg-notranslate="">conf</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.25</code></td><td>设置检测的最小置信度阈值。如果检测到的对象置信度低于此阈值，则将不予考虑。调整该值有助于减少误报。</td></tr><tr><td><code data-wg-notranslate="">iou</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">0.7</code></td><td>非最大抑制 (NMS) 的交叉重叠 (IoU) 阈值。较低的数值可以消除重叠的方框，从而减少检测次数，这对减少重复检测非常有用。</td></tr><tr><td><code data-wg-notranslate="">imgsz</code></td><td><code data-wg-notranslate="">int or tuple</code></td><td><code data-wg-notranslate="">640</code></td><td>定义用于推理的图像大小。可以是一个整数 <code data-wg-notranslate="">640</code> 或一个（高、宽）元组。适当调整大小可以提高检测精度和处理速度。</td></tr><tr><td><code data-wg-notranslate="">half</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>启用半精度（FP16）推理，可加快支持的 GPU 上的模型推理速度，同时将对精度的影响降至最低。</td></tr><tr><td><code data-wg-notranslate="">device</code></td><td><code data-wg-notranslate="">str</code></td><td><code data-wg-notranslate="">None</code></td><td>指定用于推理的设备（例如：......）、 <code data-wg-notranslate="">cpu</code>, <code data-wg-notranslate="">cuda:0</code> 或 <code data-wg-notranslate="">0</code>).允许用户选择 CPU、特定 GPU 或其他计算设备来执行模型。</td></tr><tr><td><code data-wg-notranslate="">max_det</code></td><td><code data-wg-notranslate="">int</code></td><td><code data-wg-notranslate="">300</code></td><td>每幅图像允许的最大检测次数。限制模型在单次推理中可检测到的物体总数，防止在密集场景中产生过多输出。</td></tr><tr><td><code data-wg-notranslate="">vid_stride</code></td><td><code data-wg-notranslate="">int</code></td><td><code data-wg-notranslate="">1</code></td><td>视频输入的帧间距。允许跳过视频中的帧，以加快处理速度，但会牺牲时间分辨率。值为 1 时处理每一帧，值越大跳帧越多。</td></tr><tr><td><code data-wg-notranslate="">stream_buffer</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>确定在处理视频流时是否对所有帧进行缓冲 (<code data-wg-notranslate="">True</code>)，或者模型是否应该返回最近的帧 (<code data-wg-notranslate="">False</code>).适用于实时应用。</td></tr><tr><td><code data-wg-notranslate="">visualize</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>在推理过程中激活模型特征的可视化，从而深入了解模型 "看到 "了什么。这对调试和模型解释非常有用。</td></tr><tr><td><code data-wg-notranslate="">augment</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>可对预测进行测试时间增强（TTA），从而在牺牲推理速度的情况下提高检测的鲁棒性。</td></tr><tr><td><code data-wg-notranslate="">agnostic_nms</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>启用与类别无关的非最大抑制 (NMS)，可合并不同类别的重叠方框。这在多类检测场景中非常有用，因为在这种场景中，类的重叠很常见。</td></tr><tr><td><code data-wg-notranslate="">classes</code></td><td><code data-wg-notranslate="">list[int]</code></td><td><code data-wg-notranslate="">None</code></td><td>根据一组类别 ID 过滤预测结果。只返回属于指定类别的检测结果。在多类检测任务中，该功能有助于集中检测相关对象。</td></tr><tr><td><code data-wg-notranslate="">retina_masks</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>如果模型中存在高分辨率的分割掩膜，则使用高分辨率的分割掩膜。这可以提高分割任务的掩膜质量，提供更精细的细节。</td></tr><tr><td><code data-wg-notranslate="">embed</code></td><td><code data-wg-notranslate="">list[int]</code></td><td><code data-wg-notranslate="">None</code></td><td>指定从中提取特征向量或嵌入的层。这对聚类或相似性搜索等下游任务非常有用。</td></tr></tbody></table></div><h3 id="常用参数-2"><a href="#常用参数-2" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conf、 IoU、 half、 imgsz、 device、 classes、</span><br></pre></td></tr></table></figure><h3 id="结果参数"><a href="#结果参数" class="headerlink" title="结果参数"></a>结果参数</h3><div class="md-typeset__table"><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code data-wg-notranslate="">orig_img</code></td><td><code data-wg-notranslate="">numpy.ndarray</code></td><td>原始图像的 numpy 数组。</td></tr><tr><td><code data-wg-notranslate="">orig_shape</code></td><td><code data-wg-notranslate="">tuple</code></td><td>原始图像的形状，格式为（高、宽）。</td></tr><tr><td><code data-wg-notranslate="">boxes</code></td><td><code data-wg-notranslate="">Boxes, optional</code></td><td>包含检测边界框的方框对象。</td></tr><tr><td><code data-wg-notranslate="">masks</code></td><td><code data-wg-notranslate="">Masks, optional</code></td><td>包含检测掩码的掩码对象。</td></tr><tr><td><code data-wg-notranslate="">probs</code></td><td><code data-wg-notranslate="">Probs, optional</code></td><td>Probs 对象，包含分类任务中每个类别的概率。</td></tr><tr><td><code data-wg-notranslate="">keypoints</code></td><td><code data-wg-notranslate="">Keypoints, optional</code></td><td>关键点对象，包含每个对象的检测关键点。</td></tr><tr><td><code data-wg-notranslate="">obb</code></td><td><code data-wg-notranslate="">OBB, optional</code></td><td>包含定向包围盒的 OBB 对象。</td></tr><tr><td><code data-wg-notranslate="">speed</code></td><td><code data-wg-notranslate="">dict</code></td><td>每幅图像的预处理、推理和后处理速度字典，单位为毫秒。</td></tr><tr><td><code data-wg-notranslate="">names</code></td><td><code data-wg-notranslate="">dict</code></td><td>类名字典。</td></tr><tr><td><code data-wg-notranslate="">path</code></td><td><code data-wg-notranslate="">str</code></td><td>图像文件的路径。</td></tr></tbody></table></div><h3 id="results支持方法"><a href="#results支持方法" class="headerlink" title="results支持方法"></a>results支持方法</h3><div class="md-typeset__scrollwrap"><div class="md-typeset__table"><table><thead><tr><th>方法</th><th>返回类型</th><th>说明</th></tr></thead><tbody><tr><td><code data-wg-notranslate="">update()</code></td><td><code data-wg-notranslate="">None</code></td><td>更新结果对象的方框、掩码和 probs 属性。</td></tr><tr><td><code data-wg-notranslate="">cpu()</code></td><td><code data-wg-notranslate="">Results</code></td><td>返回包含 CPU 内存中所有张量的结果对象副本。</td></tr><tr><td><code data-wg-notranslate="">numpy()</code></td><td><code data-wg-notranslate="">Results</code></td><td>返回结果对象的副本，其中所有张量均为 numpy 数组。</td></tr><tr><td><code data-wg-notranslate="">cuda()</code></td><td><code data-wg-notranslate="">Results</code></td><td>返回包含 GPU 内存中所有张量的 Results 对象副本。</td></tr><tr><td><code data-wg-notranslate="">to()</code></td><td><code data-wg-notranslate="">Results</code></td><td>返回带有指定设备和 dtype 上张量的 Results 对象副本。</td></tr><tr><td><code data-wg-notranslate="">new()</code></td><td><code data-wg-notranslate="">Results</code></td><td>返回一个具有相同图像、路径和名称的新结果对象。</td></tr><tr><td><code data-wg-notranslate="">plot()</code></td><td><code data-wg-notranslate="">numpy.ndarray</code></td><td>绘制检测结果。返回注释图像的 numpy 数组。</td></tr><tr><td><code data-wg-notranslate="">show()</code></td><td><code data-wg-notranslate="">None</code></td><td>在屏幕上显示带注释的结果。</td></tr><tr><td><code data-wg-notranslate="">save()</code></td><td><code data-wg-notranslate="">None</code></td><td>将注释结果保存到文件中。</td></tr><tr><td><code data-wg-notranslate="">verbose()</code></td><td><code data-wg-notranslate="">str</code></td><td>返回每个任务的日志字符串。</td></tr><tr><td><code data-wg-notranslate="">save_txt()</code></td><td><code data-wg-notranslate="">None</code></td><td>将预测结果保存到 txt 文件中。</td></tr><tr><td><code data-wg-notranslate="">save_crop()</code></td><td><code data-wg-notranslate="">None</code></td><td>将裁剪后的预测保存到 <code data-wg-notranslate="">save_dir/cls/file_name.jpg</code>.</td></tr><tr><td><code data-wg-notranslate="">tojson()</code></td><td><code data-wg-notranslate="">str</code></td><td>将对象转换为 JSON 格式。</td></tr></tbody></table></div></div><h2 id="Export（导出）"><a href="#Export（导出）" class="headerlink" title="Export（导出）"></a>Export（导出）</h2><blockquote><p>Ultralytics YOLOv8 中的导出模式为将训练好的模型导出为不同格式提供了多种选择，使其可以在各种平台和设备上部署</p></blockquote><h3 id="demo-3"><a href="#demo-3" class="headerlink" title="demo"></a>demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load a model</span></span><br><span class="line">model = YOLO(<span class="string">&quot;yolov8n.pt&quot;</span>)  <span class="comment"># load an official model</span></span><br><span class="line">model = YOLO(<span class="string">&quot;path/to/best.pt&quot;</span>)  <span class="comment"># load a custom trained model</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Export the model</span></span><br><span class="line">model.export(<span class="built_in">format</span>=<span class="string">&quot;onnx&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><div class="md-typeset__table"><table><thead><tr><th>论据</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code data-wg-notranslate="">format</code></td><td><code data-wg-notranslate="">str</code></td><td><code data-wg-notranslate="">'torchscript'</code></td><td>导出模型的目标格式，例如 <code data-wg-notranslate="">'onnx'</code>, <code data-wg-notranslate="">'torchscript'</code>, <code data-wg-notranslate="">'tensorflow'</code>或其他，定义与各种部署环境的兼容性。</td></tr><tr><td><code data-wg-notranslate="">imgsz</code></td><td><code data-wg-notranslate="">int</code> 或 <code data-wg-notranslate="">tuple</code></td><td><code data-wg-notranslate="">640</code></td><td>模型输入所需的图像尺寸。对于正方形图像，可以是一个整数，或者是一个元组 <code data-wg-notranslate="">(height, width)</code> 了解具体尺寸。</td></tr><tr><td><code data-wg-notranslate="">keras</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>启用导出为 Keras 格式的TensorFlow SavedModel ，提供与TensorFlow serving 和 API 的兼容性。</td></tr><tr><td><code data-wg-notranslate="">optimize</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>在导出到TorchScript 时，应用针对移动设备的优化，可能会减小模型大小并提高性能。</td></tr><tr><td><code data-wg-notranslate="">half</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>启用 FP16（半精度）量化，在支持的硬件上减小模型大小并可能加快推理速度。</td></tr><tr><td><code data-wg-notranslate="">int8</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>激活 INT8 量化，进一步压缩模型并加快推理速度，同时将精度损失降至最低，主要用于边缘设备。</td></tr><tr><td><code data-wg-notranslate="">dynamic</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>允许ONNX 和TensorRT 导出动态输入尺寸，提高了处理不同图像尺寸的灵活性。</td></tr><tr><td><code data-wg-notranslate="">simplify</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>简化了ONNX 导出的模型图，可能会提高性能和兼容性。</td></tr><tr><td><code data-wg-notranslate="">opset</code></td><td><code data-wg-notranslate="">int</code></td><td><code data-wg-notranslate="">None</code></td><td>指定ONNX opset 版本，以便与不同的ONNX 解析器和运行时兼容。如果未设置，则使用最新的支持版本。</td></tr><tr><td><code data-wg-notranslate="">workspace</code></td><td><code data-wg-notranslate="">float</code></td><td><code data-wg-notranslate="">4.0</code></td><td>为TensorRT 优化设置最大工作区大小（GiB），以平衡内存使用和性能。</td></tr><tr><td><code data-wg-notranslate="">nms</code></td><td><code data-wg-notranslate="">bool</code></td><td><code data-wg-notranslate="">False</code></td><td>在CoreML 导出中添加非最大值抑制 (NMS)，这对精确高效的检测后处理至关重要。</td></tr><tr><td><code data-wg-notranslate="">batch</code></td><td><code data-wg-notranslate="">int</code></td><td><code data-wg-notranslate="">1</code></td><td>指定导出模型的批量推理大小，或导出模型将同时处理的图像的最大数量。 <code data-wg-notranslate="">predict</code> 模式。</td></tr></tbody></table></div><h3 id="支持导出格式"><a href="#支持导出格式" class="headerlink" title="支持导出格式"></a>支持导出格式</h3><div class="md-typeset__table"><table><thead><tr><th>格式</th><th><code data-wg-notranslate="">format</code> 论据</th><th>模型</th><th>元数据</th><th>论据</th></tr></thead><tbody><tr><td><a href="https://pytorch.org/">PyTorch</a></td><td>-</td><td><code data-wg-notranslate="">yolov8n.pt</code></td><td>✅</td><td>-</td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/torchscript/">TorchScript</a></td><td><code data-wg-notranslate="">torchscript</code></td><td><code data-wg-notranslate="">yolov8n.torchscript</code></td><td>✅</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">optimize</code>, <code data-wg-notranslate="">batch</code></td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/onnx/">ONNX</a></td><td><code data-wg-notranslate="">onnx</code></td><td><code data-wg-notranslate="">yolov8n.onnx</code></td><td>✅</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">half</code>, <code data-wg-notranslate="">dynamic</code>, <code data-wg-notranslate="">simplify</code>, <code data-wg-notranslate="">opset</code>, <code data-wg-notranslate="">batch</code></td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/openvino/">OpenVINO</a></td><td><code data-wg-notranslate="">openvino</code></td><td><code data-wg-notranslate="">yolov8n_openvino_model/</code></td><td>✅</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">half</code>, <code data-wg-notranslate="">int8</code>, <code data-wg-notranslate="">batch</code></td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/tensorrt/">TensorRT</a></td><td><code data-wg-notranslate="">engine</code></td><td><code data-wg-notranslate="">yolov8n.engine</code></td><td>✅</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">half</code>, <code data-wg-notranslate="">dynamic</code>, <code data-wg-notranslate="">simplify</code>, <code data-wg-notranslate="">workspace</code>, <code data-wg-notranslate="">int8</code>, <code data-wg-notranslate="">batch</code></td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/coreml/">CoreML</a></td><td><code data-wg-notranslate="">coreml</code></td><td><code data-wg-notranslate="">yolov8n.mlpackage</code></td><td>✅</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">half</code>, <code data-wg-notranslate="">int8</code>, <code data-wg-notranslate="">nms</code>, <code data-wg-notranslate="">batch</code></td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/tf-savedmodel/">TF SavedModel</a></td><td><code data-wg-notranslate="">saved_model</code></td><td><code data-wg-notranslate="">yolov8n_saved_model/</code></td><td>✅</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">keras</code>, <code data-wg-notranslate="">int8</code>, <code data-wg-notranslate="">batch</code></td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/tf-graphdef/">TF GraphDef</a></td><td><code data-wg-notranslate="">pb</code></td><td><code data-wg-notranslate="">yolov8n.pb</code></td><td>❌</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">batch</code></td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/tflite/">TF 轻型</a></td><td><code data-wg-notranslate="">tflite</code></td><td><code data-wg-notranslate="">yolov8n.tflite</code></td><td>✅</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">half</code>, <code data-wg-notranslate="">int8</code>, <code data-wg-notranslate="">batch</code></td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/edge-tpu/">TF 边缘TPU</a></td><td><code data-wg-notranslate="">edgetpu</code></td><td><code data-wg-notranslate="">yolov8n_edgetpu.tflite</code></td><td>✅</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">batch</code></td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/tfjs/">TF.js</a></td><td><code data-wg-notranslate="">tfjs</code></td><td><code data-wg-notranslate="">yolov8n_web_model/</code></td><td>✅</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">half</code>, <code data-wg-notranslate="">int8</code>, <code data-wg-notranslate="">batch</code></td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/paddlepaddle/">PaddlePaddle</a></td><td><code data-wg-notranslate="">paddle</code></td><td><code data-wg-notranslate="">yolov8n_paddle_model/</code></td><td>✅</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">batch</code></td></tr><tr><td><a href="https://docs.ultralytics.com/zh/integrations/ncnn/">NCNN</a></td><td><code data-wg-notranslate="">ncnn</code></td><td><code data-wg-notranslate="">yolov8n_ncnn_model/</code></td><td>✅</td><td><code data-wg-notranslate="">imgsz</code>, <code data-wg-notranslate="">half</code>, <code data-wg-notranslate="">batch</code></td></tr></tbody></table></div><h1 id="Yolo的模式类型"><a href="#Yolo的模式类型" class="headerlink" title="Yolo的模式类型"></a>Yolo的模式类型</h1><h2 id="Detect（检测）"><a href="#Detect（检测）" class="headerlink" title="Detect（检测）"></a>Detect（检测）</h2><blockquote><p>检测：包括检测图像或视频帧中的物体，并在其周围绘制边界框。YOLOv8 可在单幅图像或视频帧中高精度、高速度地检测多个物体</p></blockquote><p><img src="https://user-images.githubusercontent.com/26833433/243418624-5785cb93-74c9-4541-9179-d5c6782d491a.png" alt="物体检测示例"></p><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><div class="md-typeset__scrollwrap"><div class="md-typeset__table"><table><thead><tr><th>模型</th><th>尺寸<br><sup> （像素）</sup></th><th>mAPval<sup><br>50-95</sup></th><th>速度<br><sup>CPUONNX<br> (ms)</sup></th><th>速度<br> A100<sup> TensorRT<br> （毫秒）</sup></th><th>params<br><sup>(M)</sup></th><th>FLOPs<br><sup>(B)</sup></th></tr></thead><tbody><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n.pt">YOLOv8n</a></td><td>640</td><td>37.3</td><td>80.4</td><td>0.99</td><td>3.2</td><td>8.7</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s.pt">YOLOv8s</a></td><td>640</td><td>44.9</td><td>128.4</td><td>1.20</td><td>11.2</td><td>28.6</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8m.pt">YOLOv8m</a></td><td>640</td><td>50.2</td><td>234.7</td><td>1.83</td><td>25.9</td><td>78.9</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8l.pt">YOLOv8l</a></td><td>640</td><td>52.9</td><td>375.2</td><td>2.39</td><td>43.7</td><td>165.2</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8x.pt">YOLOv8x</a></td><td>640</td><td>53.9</td><td>479.1</td><td>3.53</td><td>68.2</td><td>257.8</td></tr></tbody></table></div></div><h2 id="Segment（分割）"><a href="#Segment（分割）" class="headerlink" title="Segment（分割）"></a>Segment（分割）</h2><blockquote><p>分割是一项根据图像内容将图像分割成不同区域的任务。每个区域根据其内容分配一个标签。这项任务在图像分割和医学成像等应用中非常有用。YOLOv8 使用 U-Net 架构的变体来执行分割</p></blockquote><p><img src="https://user-images.githubusercontent.com/26833433/243418644-7df320b8-098d-47f1-85c5-26604d761286.png" alt="实例分割示例"></p><h4 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h4><div class="md-typeset__table"><table><thead><tr><th>模型</th><th>尺寸<br><sup> （像素）</sup></th><th>mAPbox<sup><br>50-95</sup></th><th>mAPmask<sup><br>50-95</sup></th><th>速度<br><sup>CPUONNX<br> (ms)</sup></th><th>速度<br> A100<sup> TensorRT<br> （毫秒）</sup></th><th>params<br><sup>(M)</sup></th><th>FLOPs<br><sup>(B)</sup></th></tr></thead><tbody><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n-seg.pt">YOLOv8n-seg</a></td><td>640</td><td>36.7</td><td>30.5</td><td>96.1</td><td>1.21</td><td>3.4</td><td>12.6</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s-seg.pt">YOLOv8s-seg</a></td><td>640</td><td>44.6</td><td>36.8</td><td>155.7</td><td>1.47</td><td>11.8</td><td>42.6</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8m-seg.pt">YOLOv8m-seg</a></td><td>640</td><td>49.9</td><td>40.8</td><td>317.0</td><td>2.18</td><td>27.3</td><td>110.2</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8l-seg.pt">YOLOv8l-seg</a></td><td>640</td><td>52.3</td><td>42.6</td><td>572.4</td><td>2.79</td><td>46.0</td><td>220.5</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8x-seg.pt">YOLOv8x-seg</a></td><td>640</td><td>53.4</td><td>43.4</td><td>712.1</td><td>4.02</td><td>71.8</td><td>344.1</td></tr></tbody></table></div><h2 id="Classify（分类）"><a href="#Classify（分类）" class="headerlink" title="Classify（分类）"></a>Classify（分类）</h2><blockquote><p>YOLOv8 可用于根据图像内容对图像进行分类。它使用 EfficientNet 架构的一种变体来执行分类。</p></blockquote><p><img src="https://user-images.githubusercontent.com/26833433/243418606-adf35c62-2e11-405d-84c6-b84e7d013804.png" alt="图像分类示例"></p><h4 id="模型-2"><a href="#模型-2" class="headerlink" title="模型"></a>模型</h4><div class="md-typeset__scrollwrap"><div class="md-typeset__table"><table><thead><tr><th>模型</th><th>尺寸<br><sup> （像素）</sup></th><th>acc<br><sup>top1</sup></th><th>acc<br><sup>top5</sup></th><th>速度<br><sup>CPUONNX<br> (ms)</sup></th><th>速度<br> A100<sup> TensorRT<br> （毫秒）</sup></th><th>params<br><sup>(M)</sup></th><th>FLOPs<br><sup>(B) at 640</sup></th></tr></thead><tbody><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n-cls.pt">YOLOv8n-cls</a></td><td>224</td><td>69.0</td><td>88.3</td><td>12.9</td><td>0.31</td><td>2.7</td><td>4.3</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s-cls.pt">YOLOv8s-cls</a></td><td>224</td><td>73.8</td><td>91.7</td><td>23.4</td><td>0.35</td><td>6.4</td><td>13.5</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8m-cls.pt">YOLOv8m-cls</a></td><td>224</td><td>76.8</td><td>93.5</td><td>85.4</td><td>0.62</td><td>17.0</td><td>42.7</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8l-cls.pt">YOLOv8l-cls</a></td><td>224</td><td>76.8</td><td>93.5</td><td>163.0</td><td>0.87</td><td>37.5</td><td>99.7</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8x-cls.pt">YOLOv8x-cls</a></td><td>224</td><td>79.0</td><td>94.6</td><td>232.0</td><td>1.01</td><td>57.4</td><td>154.8</td></tr></tbody></table></div></div><h2 id="Pose（姿态）"><a href="#Pose（姿态）" class="headerlink" title="Pose（姿态）"></a>Pose（姿态）</h2><blockquote><p>姿势&#x2F;关键点检测是一项涉及检测图像或视频帧中特定点的任务。这些点被称为关键点，用于跟踪运动或姿势估计。YOLOv8 可以高精度、高速度地检测图像或视频帧中的关键点。</p></blockquote><p><img src="https://user-images.githubusercontent.com/26833433/243418616-9811ac0b-a4a7-452a-8aba-484ba32bb4a8.png" alt="姿势估计示例"></p><h4 id="模型-3"><a href="#模型-3" class="headerlink" title="模型"></a>模型</h4><div class="md-typeset__scrollwrap"><div class="md-typeset__table"><table><thead><tr><th>模型</th><th>尺寸<br><sup> （像素）</sup></th><th><sup><br>50-95</sup></th><th>mAPpose<sup><br>50</sup></th><th>速度<br><sup>CPUONNX<br> (ms)</sup></th><th>速度<br> A100<sup> TensorRT<br> （毫秒）</sup></th><th>params<br><sup>(M)</sup></th><th>FLOPs<br><sup>(B)</sup></th></tr></thead><tbody><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n-pose.pt">YOLOv8n-姿势</a></td><td>640</td><td>50.4</td><td>80.1</td><td>131.8</td><td>1.18</td><td>3.3</td><td>9.2</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s-pose.pt">YOLOv8s-姿势</a></td><td>640</td><td>60.0</td><td>86.2</td><td>233.2</td><td>1.42</td><td>11.6</td><td>30.2</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8m-pose.pt">YOLOv8m-姿势</a></td><td>640</td><td>65.0</td><td>88.8</td><td>456.3</td><td>2.00</td><td>26.4</td><td>81.0</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8l-pose.pt">YOLOv8l-姿势</a></td><td>640</td><td>67.6</td><td>90.0</td><td>784.5</td><td>2.59</td><td>44.4</td><td>168.6</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8x-pose.pt">YOLOv8x-姿势</a></td><td>640</td><td>69.2</td><td>90.2</td><td>1607.1</td><td>3.73</td><td>69.4</td><td>263.2</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8x-pose-p6.pt">YOLOv8x-pose-p6</a></td><td>1280</td><td>71.6</td><td>91.2</td><td>4088.7</td><td>10.04</td><td>99.1</td><td>1066.4</td></tr></tbody></table></div></div><h2 id="OBB（定向检测）"><a href="#OBB（定向检测）" class="headerlink" title="OBB（定向检测）"></a>OBB（定向检测）</h2><blockquote><p>YOLOv8 可以高精度、高速度地检测图像或视频帧中的旋转物体。</p></blockquote><p><img src="https://github.com/RizwanMunawar/ultralytics/assets/62513924/5051d324-416f-4b58-ab62-f1bf9d7134b0" alt="使用 OBB 进行船舶探测"></p><h4 id="模型-4"><a href="#模型-4" class="headerlink" title="模型"></a>模型</h4><div class="md-typeset__scrollwrap"><div class="md-typeset__table"><table><thead><tr><th>模型</th><th>尺寸<br><sup> （像素）</sup></th><th>mAPtest<sup><br>50</sup></th><th>速度<br><sup>CPUONNX<br> (ms)</sup></th><th>速度<br> A100<sup> TensorRT<br> （毫秒）</sup></th><th>params<br><sup>(M)</sup></th><th>FLOPs<br><sup>(B)</sup></th></tr></thead><tbody><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n-obb.pt">YOLOv8n-obb</a></td><td>1024</td><td>78.0</td><td>204.77</td><td>3.57</td><td>3.1</td><td>23.3</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s-obb.pt">YOLOv8s-obb</a></td><td>1024</td><td>79.5</td><td>424.88</td><td>4.07</td><td>11.4</td><td>76.3</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8m-obb.pt">YOLOv8m-obb</a></td><td>1024</td><td>80.5</td><td>763.48</td><td>7.61</td><td>26.4</td><td>208.6</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8l-obb.pt">YOLOv8l-obb</a></td><td>1024</td><td>80.7</td><td>1278.42</td><td>11.83</td><td>44.5</td><td>433.8</td></tr><tr><td><a href="https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8x-obb.pt">YOLOv8x-obb</a></td><td>1024</td><td>81.36</td><td>1759.10</td><td>13.23</td><td>69.5</td><td>676.7</td></tr></tbody></table></div></div><h2 id="个人经验"><a href="#个人经验" class="headerlink" title="个人经验"></a>个人经验</h2><h3 id="如何使用Yolov8"><a href="#如何使用Yolov8" class="headerlink" title="如何使用Yolov8"></a>如何使用Yolov8</h3><blockquote><p>github官网找到项目地址：[<a href="https://github.com/ultralytics/ultralytics]">https://github.com/ultralytics/ultralytics]</a></p><p>所需下载PyTorch环境版本地址：[<a href="https://pytorch.org/get-started/locally/]">https://pytorch.org/get-started/locally/]</a></p><p>下载项目以后安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install ultralytics</span><br><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118 (根据自己电脑配置决定)</span><br></pre></td></tr></table></figure><p>使用显卡启动Yolo所需配置：</p><p>cuda，cudnn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi 查看自己电脑支持的最高cuda版本，建议安装11.8比较稳定</span><br><span class="line">然后安装对应支持的cuda，cudnn</span><br><span class="line">参考：https://blog.csdn.net/jhsignal/article/details/111401628</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240530004125740.png" alt="image-20240530004125740"></p><p>验证是否支持、是否安装成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">5</span>).cuda()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure></blockquote><h3 id="训练结果参数理解"><a href="#训练结果参数理解" class="headerlink" title="训练结果参数理解"></a>训练结果参数理解</h3><blockquote><p>![屏幕截图 2024-05-28 234032](D:\Ondrive\OneDrive\图片\屏幕快照\屏幕截图 2024-05-28 234032.png)</p><p>Class：类别</p><p>Image：图片数量</p><p>Instances：类别数量</p><p>Box（P）：边界框的精度（Precision），反映了模型预测的边界框中正确预测的比例。高精度表示模型产生的假阳性（False Positives）较少。其中，真阳性是正确预测的目标数，假阳性是错误标记的目标数。<br>计算方法（不懂）：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Tick_Tick\Image\6655f78febad3a00000000b1.png" alt="6655f78febad3a00000000b1"></p><p>R - Recall：R 即召回率（Recall），衡量了模型捕获真实目标的能力。高召回率表示模型能够检测到大多数真实目标，但可能包括一些错误的检测。</p><p>mAP50（mean Average Precision）：mAP50 指的是在 IoU（交并比）阈值为0.50时的平均精度（Mean Average Precision）。这是一个常用的指标，因为它只考虑较为宽松的匹配标准。它测量的是当预测的边界框与真实边界框的交并比至少为0.50时的平均精度。</p><p>mAP50-95：mAP50-95 是一个更全面的性能指标，它计算了从 IoU&#x3D;0.50 到 IoU&#x3D;0.95（每隔0.05一个阶梯）的平均精度。这是评估模型整体性能的一个更严格的标准，因为它考虑了更多的匹配严格程度。</p><p>训练参数IoU（预测使用的）：假设你有两个边界框，一个是预测边界框（Predicted Box），另一个是真实边界框（Ground Truth Box）：</p><p>交集（Intersection）：预测边界框和真实边界框重叠区域的面积。<br>并集（Union）：预测边界框和真实边界框覆盖的总面积，但重叠区域只计算一次。<br>IoU 的值范围从0到1：IoU &#x3D; 0 表示没有重叠。IoU &#x3D; 1 表示完全重叠。</p><p>2024-05-30</p></blockquote><h4 id="待完善"><a href="#待完善" class="headerlink" title="待完善"></a>待完善</h4><blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Yolo的任务分类&quot;&gt;&lt;a href=&quot;#Yolo的任务分类&quot; class=&quot;headerlink&quot; title=&quot;Yolo的任务分类&quot;&gt;&lt;/a&gt;Yolo的任务分类&lt;/h1&gt;&lt;h2 id=&quot;Train（训练）&quot;&gt;&lt;a href=&quot;#Train（训练）&quot; class</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://concaxu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="AI" scheme="https://concaxu.github.io/tags/AI/"/>
    
    <category term="Python" scheme="https://concaxu.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
